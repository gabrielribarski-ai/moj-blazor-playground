@*** filename: OcenjevalniAtribut.razor ****@
@using CustomTypeExtensions
@using IzracunInvalidnostiBlazor.Models
@using Microsoft.Extensions.Logging
@using Microsoft.Extensions.Options
@using System.Text.Json
@inject NavigationManager Nav
@inject ILogger<Index> Logger

@using Microsoft.AspNetCore.Mvc
@inject IOptions<JsonOptions> JsonOptions

<div class="segment-box listni">
    <h4>@Segment.Opis</h4>

    @foreach (var atribut in Segment.Atributi)
    {
        <div class="atribut-row">
            <label>@atribut.Opis (@atribut.Enota)</label>

            <table class="atribut-tabela">
                <thead>
                    <tr>
                        <th>E</th>
                        <th>L</th>
                        <th>S</th>
                        <th>D</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>

                            @if (atribut.TipMeritve == TipMeritveEnum.NUM)
                            {
                                <InputNumber @bind-Value="atribut.Ocena.VrednostE" class="form-control" />
                            }
                            else @if (atribut.TipMeritve == TipMeritveEnum.BOOL)
                            {
                                <InputCheckbox @bind-Value="atribut.Ocena.VrednostE_Bool" />
                            }
                        </td>
                        <td>
                            @if (atribut.TipMeritve == TipMeritveEnum.NUM)
                            {
                                <InputNumber @bind-Value="atribut.Ocena.VrednostL" class="form-control" />
                            }
                            else @if (atribut.TipMeritve == TipMeritveEnum.BOOL)
                            {
                                <InputCheckbox @bind-Value="atribut.Ocena.VrednostL_Bool" />
                            }
                        </td>
                        <td>
                            @atribut.StandardnaVrednost
                        </td>
                        <td>
                            @if (atribut.TipMeritve == TipMeritveEnum.NUM)
                            {
                                <InputNumber @bind-Value="atribut.Ocena.VrednostD" class="form-control" />
                            }
                            else @if (atribut.TipMeritve == TipMeritveEnum.BOOL)
                            {
                                <InputCheckbox @bind-Value="atribut.Ocena.VrednostD_Bool" />
                            }
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    }

    @if (!OcenaPotrjena)
    {
        <button class="btn btn-success mt-3" @onclick="PotrdiOceno">Potrdi oceno</button>
    }
    else
        {
        <div class="mt-3">
            <h5>Možni izračuni</h5>
            <div>
                <strong>L stran:</strong>
                @foreach (var d in MozniDeficiti.Where(x => x.StranLDE == StranLDE.L))
                {
                    <div>Deficit @d.MoznaPrimerjava: @d.Deficit% → @d.IzracunaniOdstotek%</div>
                }
        </div>
        <div>
            <strong>D stran:</strong>
            @foreach (var d in MozniDeficiti.Where(x => x.StranLDE == StranLDE.D))
            {
                <div>Deficit @d.MoznaPrimerjava: @d.Deficit% → @d.IzracunaniOdstotek%</div>
            }
        </div>

        <button class="btn btn-primary mt-3" @onclick="ZakljuciSegment">Zaključi segment</button>
    </div>
    }
    @if (!FazaPredogleda)
    {
        <button class="btn btn-success mt-3" @onclick="PredogledIzracuna">
            Izračunaj možnosti
        </button>
    }
    else
    {
        <div class="mt-3 p-3 border rounded">
            <h5>Izberi izračunane stopnje invalidnosti</h5>

            @if (Segment.SimetrijaDelaTelesa == SimetrijaDelaTelesa.LD)
            {
                <div class="row">
                    <div class="col-md-6">
                        <label class="form-label">L stran</label>
                        <select class="form-select" @bind="SelectedLPercent">
                            <option value="">— izberi —</option>
                            @foreach (var v in OpcijeL)
                            {
                                <option value="@v">@v.ToString("0.00")%</option>
                            }
                        </select>
                    </div>
                    <div class="col-md-6">
                        <label class="form-label">D stran</label>
                        <select class="form-select" @bind="SelectedDPercent">
                            <option value="">— izberi —</option>
                            @foreach (var v in OpcijeD)
                            {
                                <option value="@v">@v.ToString("0.00")%</option>
                            }
                        </select>
                    </div>
                </div>
            }
            else if (Segment.SimetrijaDelaTelesa == SimetrijaDelaTelesa.E)
            {
                <label class="form-label">E stran</label>
                <select class="form-select" @bind="SelectedLPercent">
                    <option value="">— izberi —</option>
                    @foreach (var v in OpcijeL)  // ali OpcijeD, odvisno od tvoje domene
                    {
                        <option value="@v">@v.ToString("0.00")%</option>
                    }
                </select>
            }

            <div class="mt-3">
                <button class="btn btn-primary" disabled="@(LahkoZakljuci() ? null : true)" @onclick="ZakljuciSegment">
                    Zaključi segment
                </button>
            </div>
        </div>
    }
</div>

@code {

    [Parameter] public Segment Segment { get; set; } = default!;
    [Parameter] public EventCallback<Segment> OnOcenaPotrjena { get; set; }

    private bool FazaPredogleda = false;
    private bool OcenaPotrjena = false;
    private List<MozniDeficit> MozniDeficiti = new();
    private List<decimal> OpcijeL = new(); // možni odstotki za L
    private List<decimal> OpcijeD = new(); // možni odstotki za D

    private decimal? SelectedLPercent;
    private decimal? SelectedDPercent;

    private void PredogledIzracuna()
    {
        IzracunajDeficit();

        MozniDeficiti = Segment.MozniDeficitNabor ?? new();

        OpcijeL = MozniDeficiti
            .Where(x => x.StranLDE == StranLDE.L && x.IzracunaniOdstotek.HasValue)
            .Select(x => x.IzracunaniOdstotek!.Value)
            .Distinct()
            .OrderBy(v => v)
            .Take(2)
            .ToList();

        OpcijeD = MozniDeficiti
            .Where(x => x.StranLDE == StranLDE.D && x.IzracunaniOdstotek.HasValue)
            .Select(x => x.IzracunaniOdstotek!.Value)
            .Distinct()
            .OrderBy(v => v)
            .Take(2)
            .ToList();

        // reset izbir
        SelectedLPercent = null;
        SelectedDPercent = null;

        FazaPredogleda = true;
    }

    private bool LahkoZakljuci()
    {
        return Segment.SimetrijaDelaTelesa switch
        {
            // če je segment dvostranski (leva in desna stran),
            // zahtevaj vsaj eno izbiro
            SimetrijaDelaTelesa.LD => SelectedLPercent.HasValue || SelectedDPercent.HasValue,

            // če je enostranski (E), zadostuje katerakoli izbira
            SimetrijaDelaTelesa.E => SelectedLPercent.HasValue || SelectedDPercent.HasValue,

            // fallback
            _ => false
        };
    }



    private async Task ZakljuciSegment()
    {
        Segment.ClearIzberiMozniDeficit();
        // Zapiši izbor v segment (predlagam dodati polji; če ju že imaš, prilagodi imena)
        var L = Segment.FindMozniDeficit(StranLDE.L, SelectedLPercent.Value);
        var D = Segment.FindMozniDeficit(StranLDE.D, SelectedLPercent.Value);
        L.JeIzbran = true;
        D.JeIzbran = true;
        await OnOcenaPotrjena.InvokeAsync(Segment);
        FazaPredogleda = false;
    }



    private void PotrdiOceno()
    {
        IzracunajDeficit();
        log_segment();
        OcenaPotrjena = true;

        // sporoči navzgor
        OnOcenaPotrjena.InvokeAsync(Segment);
    }

    //private MozniDeficit? MakeDeficit(MoznaPrimerjava tip, decimal dejanska, decimal referenca, StranLDE stranLDE)
    private MozniDeficit? MakeDeficit(MoznaPrimerjavaEnum moznaPrimerjava, decimal dejanska, decimal referenca, StranLDE stranLDE)
    {
        if (Segment.SimetrijaDelaTelesa == SimetrijaDelaTelesa.E && stranLDE != StranLDE.E)
            return null;

        if (Segment.SimetrijaDelaTelesa == SimetrijaDelaTelesa.LD && stranLDE == StranLDE.E)
            return null;

        var deficit = CalcDeficit(dejanska, referenca);
        if (deficit>=100)
            return null;
        // zberi vse stopnje iz atributov trenutnega segmenta
        var vseStopnje = Segment.Atributi.SelectMany(a => a.Stopnje).ToList();

        MozniDeficit mozniDeficit= new MozniDeficit
        {
            MoznaPrimerjava = moznaPrimerjava,
            Deficit = deficit,
            StranLDE = stranLDE,
            IzracunaniOdstotek = IzracunajInvalidnost(deficit, vseStopnje)
        };
        return mozniDeficit;
        //Segment.MozniDeficitNabor.Add(mozniDeficit);
    }



    public void IzracunajDeficit()
    {
        Segment.IzmerjeniDeficit = new();

        var simetrija = Segment.SimetrijaDelaTelesa;  // enum, ki vrne LD ali E
        // seštej vse vrednosti v enem koraku
        Segment.IzmerjeniDeficit.GibljivostSkupajL = Segment.Atributi.Sum(atr => atr.Ocena.VrednostL.AsDecimal());
        Segment.IzmerjeniDeficit.GibljivostSkupajD = Segment.Atributi.Sum(atr => atr.Ocena.VrednostD.AsDecimal());
        Segment.IzmerjeniDeficit.GibljivostSkupajE = Segment.Atributi.Sum(atr => atr.Ocena.VrednostE.AsDecimal());
        Segment.IzmerjeniDeficit.StandardSkupaj = Segment.Atributi.Sum(atr => atr.StandardnaVrednost.AsDecimal());

        List<MozniDeficit> deficiti = new List<MozniDeficit>();

        var kandidati = new[]
        {
            MakeDeficit(MoznaPrimerjavaEnum.E_primerjava_S, Segment.IzmerjeniDeficit.GibljivostSkupajE, Segment.IzmerjeniDeficit.StandardSkupaj, StranLDE.E),
            MakeDeficit(MoznaPrimerjavaEnum.D_primerjava_S, Segment.IzmerjeniDeficit.GibljivostSkupajD, Segment.IzmerjeniDeficit.StandardSkupaj, StranLDE.D),
            MakeDeficit(MoznaPrimerjavaEnum.L_primerjava_S, Segment.IzmerjeniDeficit.GibljivostSkupajL, Segment.IzmerjeniDeficit.StandardSkupaj, StranLDE.L),
            MakeDeficit(MoznaPrimerjavaEnum.L_primerjava_D, Segment.IzmerjeniDeficit.GibljivostSkupajL, Segment.IzmerjeniDeficit.GibljivostSkupajD, StranLDE.L),
            MakeDeficit(MoznaPrimerjavaEnum.D_primerjava_L, Segment.IzmerjeniDeficit.GibljivostSkupajD, Segment.IzmerjeniDeficit.GibljivostSkupajL, StranLDE.D)
        };

        Segment.MozniDeficitNabor = Segment.MozniDeficitNabor ?? new List<MozniDeficit>();
        //Logger.LogInformation("L_primerjava_D" + " : " + deficiti.Last().Deficit);
        Segment.MozniDeficitNabor.AddRange(kandidati.Where(d => d != null)!);

        foreach (var d in deficiti)
        {
            Logger.LogInformation(
                "Primerjava: {Primerjava}, Stran: {Stran}, Deficit: {Deficit}%",
                d.MoznaPrimerjava,
                d.StranLDE,
                d.Deficit?.ToString("0.00")
            );
        }
    }


    private void log_segment()
    {
        var json = JsonSerializer.Serialize(Segment, JsonOptions.Value.JsonSerializerOptions);
        Logger.LogInformation("OcenjevalniAtribut.razor->Segment {json}", json);
    }

    protected override async Task OnInitializedAsync()
    {
        foreach (Atribut atr in Segment.Atributi)
        {
            atr.Ocena = new();    
        }
    }

    private decimal CalcDeficit(decimal dejanska, decimal referenca)
    {
        if (referenca == 0) return 0;
        var razlika = Math.Abs(referenca - dejanska);
        return Math.Round((razlika / referenca) * 100, 2);
    }

    private decimal? IzracunajInvalidnost(decimal deficitPercent, List<StopnjaDeficita> stopnje)
    {
        if (stopnje == null || stopnje.Count == 0)
            return null;

        // 1) pripravimo vrednost med 0 in 1
        var coef = deficitPercent / 100m;

        // 2) relativne stopnje (R) z ObmocjeNum in interpolacija
        var relativne = stopnje
            .Where(s => s.OdstotekFR == OdstotekFR.R && s.ObmocjeNum.HasValue)
            .OrderBy(s => s.ObmocjeNum.Value)
            .ToArray();

        if (relativne.Length > 0)
        {
            // če smo pod prvo mejo, vrnemo prvo StopnjaNum
            if (coef <= relativne[0].ObmocjeNum)
                return relativne[0].StopnjaNum;

            // poiščemo naslednji “point” nad našim coëfom
            var nextIndex = Array.FindIndex(relativne, s => coef <= s.ObmocjeNum);
            if (nextIndex >= 0)
            {
                var prev = relativne[nextIndex - 1];
                var next = relativne[nextIndex];
                var span = next.ObmocjeNum.Value - prev.ObmocjeNum.Value;
                var t = (coef - prev.ObmocjeNum.Value) / span;
                return t < 0 || span == 0
                    ? next.StopnjaNum
                    : Math.Round(prev.StopnjaNum + t * (next.StopnjaNum - prev.StopnjaNum), 2);
            }

            // nad zadnjo mejo
            return relativne[^1].StopnjaNum;
        }

        // 3) fiksne stopnje (F): razdelimo 0–1 na n delov in izračunamo indeks
        var fiksne = stopnje
            .Where(s => s.OdstotekFR == OdstotekFR.F)
            .OrderBy(s => s.ZapSt)
            .Select(s => s.StopnjaNum)
            .ToArray();

        if (fiksne.Length == 0)
            return null;

        if (coef <= 0)
            return 0;

        // indeks = floor(coef * n), a ne preseže n-1
        var idx = Math.Min((int)(coef * fiksne.Length), fiksne.Length - 1);
        return fiksne[idx];
    }


}