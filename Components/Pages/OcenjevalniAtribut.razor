@*** filename: OcenjevalniAtribut.razor ****@
@using CustomTypeExtensions
@using IzracunInvalidnostiBlazor.Models
@using Microsoft.Extensions.Logging
@using Microsoft.Extensions.Options
@using System.Text.Json
@using System.ComponentModel;
@inject NavigationManager Nav
@inject ILogger<Index> Logger
@using Microsoft.AspNetCore.Mvc
@inject IOptions<JsonOptions> JsonOptions

<div class="segment-box listni">
    <h4>@Segment.Opis</h4>

<AtributEditor Segment="Segment" />

@if (FazaPredogleda)
{
    <DeficitPreview Segment="Segment" />
    <DeficitSelector Segment="Segment"
                     SelectedLPercent="@SelectedLPercent"
                     SelectedLPercentChanged="@((decimal? val) => SelectedLPercent = val)"
                     SelectedDPercent="@SelectedDPercent"
                     SelectedDPercentChanged="@((decimal? val) => SelectedDPercent = val)"
                     SelectedEPercent="@SelectedEPercent"
                     SelectedEPercentChanged="@((decimal? val) => SelectedEPercent = val)" />
}
</div>

@code {

    [Parameter] public Segment Segment { get; set; } = default!;
    [Parameter] public EventCallback<Segment> OnOcenaPotrjena { get; set; }

    private bool FazaPredogleda = false;
    private List<MozniDeficit> MozniDeficiti = new();
    private List<decimal> OpcijeL = new();
    private List<decimal> OpcijeD = new();

    private decimal? SelectedLPercent;
    private decimal? SelectedDPercent;
    private decimal? SelectedEPercent;

    private void PredogledIzracuna()
    {
        IzracunajDeficit();

        MozniDeficiti = Segment.MozniDeficitNabor ?? new();

        OpcijeL = MozniDeficiti
            .Where(x => x.StranLDE == StranLDE.L && x.IzracunaniOdstotek.HasValue)
            .Select(x => x.IzracunaniOdstotek!.Value)
            .Distinct()
            .OrderBy(v => v)
            .Take(2)
            .ToList();

        OpcijeD = MozniDeficiti
            .Where(x => x.StranLDE == StranLDE.D && x.IzracunaniOdstotek.HasValue)
            .Select(x => x.IzracunaniOdstotek!.Value)
            .Distinct()
            .OrderBy(v => v)
            .Take(2)
            .ToList();

        SelectedLPercent = null;
        SelectedDPercent = null;
        FazaPredogleda = true;
    }


    private bool LahkoZakljuci()
    {
        return Segment.SimetrijaDelaTelesa switch
        {
            SimetrijaDelaTelesa.LD => SelectedLPercent.HasValue && SelectedDPercent.HasValue,
            SimetrijaDelaTelesa.E => SelectedLPercent.HasValue || SelectedDPercent.HasValue,
            _ => false
        };
    }

    private string GetDescription(Enum value)
    {
        var field = value.GetType().GetField(value.ToString());
        var attr = (DescriptionAttribute?)Attribute.GetCustomAttribute(field!, typeof(DescriptionAttribute));
        return attr?.Description ?? value.ToString();
    }

    private async Task ZakljuciSegment()
    {
        if (!LahkoZakljuci())
            return;

        Segment.ClearIzberiMozniDeficit();

        if (SelectedLPercent.HasValue)
            Segment.IzberiMozniDeficit(StranLDE.L, SelectedLPercent.Value);

        if (SelectedDPercent.HasValue)
            Segment.IzberiMozniDeficit(StranLDE.D, SelectedDPercent.Value);

        await OnOcenaPotrjena.InvokeAsync(Segment);
        FazaPredogleda = false;
    }


    private void PotrdiOceno()
    {
        IzracunajDeficit();
        log_segment();
        // sporoči navzgor
        OnOcenaPotrjena.InvokeAsync(Segment);
    }

    //private MozniDeficit? MakeDeficit(MoznaPrimerjava tip, decimal dejanska, decimal referenca, StranLDE stranLDE)
    private MozniDeficit? MakeDeficit(MoznaPrimerjavaEnum moznaPrimerjava, decimal dejanska, decimal referenca, StranLDE stranLDE)
    {
        if (Segment.SimetrijaDelaTelesa == SimetrijaDelaTelesa.E && stranLDE != StranLDE.E)
            return null;

        if (Segment.SimetrijaDelaTelesa == SimetrijaDelaTelesa.LD && stranLDE == StranLDE.E)
            return null;

        var deficit = CalcDeficit(dejanska, referenca);
        if (deficit >= 100)
            return null;
        // zberi vse stopnje iz atributov trenutnega segmenta
        var vseStopnje = Segment.Atributi.SelectMany(a => a.Stopnje).ToList();

        MozniDeficit mozniDeficit = new MozniDeficit
        {
            MoznaPrimerjava = moznaPrimerjava,
            Deficit = deficit,
            StranLDE = stranLDE,
            IzracunaniOdstotek = IzracunajInvalidnost(deficit, vseStopnje)
        };
        return mozniDeficit;
        //Segment.MozniDeficitNabor.Add(mozniDeficit);
    }



    public void IzracunajDeficit()
    {
        Segment.IzmerjeniDeficit = new();

        var simetrija = Segment.SimetrijaDelaTelesa;  // enum, ki vrne LD ali E
        // seštej vse vrednosti v enem koraku
        Segment.IzmerjeniDeficit.GibljivostSkupajL = Segment.Atributi.Sum(atr => atr.Ocena.VrednostL.AsDecimal());
        Segment.IzmerjeniDeficit.GibljivostSkupajD = Segment.Atributi.Sum(atr => atr.Ocena.VrednostD.AsDecimal());
        Segment.IzmerjeniDeficit.GibljivostSkupajE = Segment.Atributi.Sum(atr => atr.Ocena.VrednostE.AsDecimal());
        Segment.IzmerjeniDeficit.StandardSkupaj = Segment.Atributi.Sum(atr => atr.StandardnaVrednost.AsDecimal());

        List<MozniDeficit> deficiti = new List<MozniDeficit>();

        var kandidati = new[]
        {
            MakeDeficit(MoznaPrimerjavaEnum.ES, Segment.IzmerjeniDeficit.GibljivostSkupajE, Segment.IzmerjeniDeficit.StandardSkupaj, StranLDE.E),
            MakeDeficit(MoznaPrimerjavaEnum.DS, Segment.IzmerjeniDeficit.GibljivostSkupajD, Segment.IzmerjeniDeficit.StandardSkupaj, StranLDE.D),
            MakeDeficit(MoznaPrimerjavaEnum.LS, Segment.IzmerjeniDeficit.GibljivostSkupajL, Segment.IzmerjeniDeficit.StandardSkupaj, StranLDE.L),
            MakeDeficit(MoznaPrimerjavaEnum.LD, Segment.IzmerjeniDeficit.GibljivostSkupajL, Segment.IzmerjeniDeficit.GibljivostSkupajD, StranLDE.L),
            MakeDeficit(MoznaPrimerjavaEnum.DL, Segment.IzmerjeniDeficit.GibljivostSkupajD, Segment.IzmerjeniDeficit.GibljivostSkupajL, StranLDE.D)
        };

        Segment.MozniDeficitNabor = Segment.MozniDeficitNabor ?? new List<MozniDeficit>();
        //Logger.LogInformation("L_primerjava_D" + " : " + deficiti.Last().Deficit);
        Segment.MozniDeficitNabor.AddRange(kandidati.Where(d => d != null)!);

        foreach (var d in deficiti)
        {
            Logger.LogInformation(
                "Primerjava: {Primerjava}, Stran: {Stran}, Deficit: {Deficit}%",
                d.MoznaPrimerjava,
                d.StranLDE,
                d.Deficit?.ToString("0.00")
            );
        }
    }


    private void log_segment()
    {
        var json = JsonSerializer.Serialize(Segment, JsonOptions.Value.JsonSerializerOptions);
        Logger.LogInformation("OcenjevalniAtribut.razor->Segment {json}", json);
    }

    protected override async Task OnInitializedAsync()
    {
        foreach (Atribut atr in Segment.Atributi)
        {
            atr.Ocena = new();
        }
    }

    private decimal CalcDeficit(decimal dejanska, decimal referenca)
    {
        if (referenca == 0) return 0;
        var razlika = Math.Abs(referenca - dejanska);
        return Math.Round((razlika / referenca) * 100, 2);
    }

    private decimal? IzracunajInvalidnost(decimal deficitPercent, List<StopnjaDeficita> stopnje)
    {
        if (stopnje == null || stopnje.Count == 0)
            return null;

        // 1) pripravimo vrednost med 0 in 1
        var coef = deficitPercent / 100m;

        // 2) relativne stopnje (R) z ObmocjeNum in interpolacija
        var relativne = stopnje
            .Where(s => s.OdstotekFR == OdstotekFR.R && s.ObmocjeNum.HasValue)
            .OrderBy(s => s.ObmocjeNum.Value)
            .ToArray();

        if (relativne.Length > 0)
        {
            // če smo pod prvo mejo, vrnemo prvo StopnjaNum
            if (coef <= relativne[0].ObmocjeNum)
                return relativne[0].StopnjaNum;

            // poiščemo naslednji “point” nad našim coëfom
            var nextIndex = Array.FindIndex(relativne, s => coef <= s.ObmocjeNum);
            if (nextIndex >= 0)
            {
                var prev = relativne[nextIndex - 1];
                var next = relativne[nextIndex];
                var span = next.ObmocjeNum.Value - prev.ObmocjeNum.Value;
                var t = (coef - prev.ObmocjeNum.Value) / span;
                return t < 0 || span == 0
                    ? next.StopnjaNum
                    : Math.Round(prev.StopnjaNum + t * (next.StopnjaNum - prev.StopnjaNum), 2);
            }

            // nad zadnjo mejo
            return relativne[^1].StopnjaNum;
        }

        // 3) fiksne stopnje (F): razdelimo 0–1 na n delov in izračunamo indeks
        var fiksne = stopnje
            .Where(s => s.OdstotekFR == OdstotekFR.F)
            .OrderBy(s => s.ZapSt)
            .Select(s => s.StopnjaNum)
            .ToArray();

        if (fiksne.Length == 0)
            return null;

        if (coef <= 0)
            return 0;

        // indeks = floor(coef * n), a ne preseže n-1
        var idx = Math.Min((int)(coef * fiksne.Length), fiksne.Length - 1);
        return fiksne[idx];
    }


}