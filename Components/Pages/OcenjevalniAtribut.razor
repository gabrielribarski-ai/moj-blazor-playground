@*** filename: OcenjevalniAtribut.razor ****@
@namespace IzracunInvalidnostiBlazor
@using System.Text.Json
@using CustomTypeExtensions
@using static IzracunInvalidnostiBlazor.OcenjevalniAtribut
@using Microsoft.Extensions.Logging
@inject NavigationManager Nav
@inject ILogger<Index> Logger

<div class="segment-box listni">
    <h4>@Segment.Opis</h4>

    @foreach (var atribut in Segment.Atributi)
    {
        <div class="atribut-row">
            <label>@atribut.Opis (@atribut.Enota)</label>

            <table class="atribut-tabela">
                <thead>
                    <tr>
                        <th>E</th>
                        <th>L</th>
                        <th>S</th>
                        <th>D</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>

                            @if (atribut.TipMeritve == TipMeritveEnum.NUM)
                            {
                                <InputNumber @bind-Value="atribut.Ocena.VrednostE" class="form-control" />
                            }
                            else @if (atribut.TipMeritve == TipMeritveEnum.BOOL)
                            {
                                <InputCheckbox @bind-Value="atribut.Ocena.VrednostE_Bool" />
                            }
                        </td>
                        <td>
                            @if (atribut.TipMeritve == TipMeritveEnum.NUM)
                            {
                                <InputNumber @bind-Value="atribut.Ocena.VrednostL" class="form-control" />
                            }
                            else @if (atribut.TipMeritve == TipMeritveEnum.BOOL)
                            {
                                <InputCheckbox @bind-Value="atribut.Ocena.VrednostL_Bool" />
                            }
                        </td>
                        <td>
                            @atribut.StandardnaVrednost
                        </td>
                        <td>
                            @if (atribut.TipMeritve == TipMeritveEnum.NUM)
                            {
                                <InputNumber @bind-Value="atribut.Ocena.VrednostD" class="form-control" />
                            }
                            else @if (atribut.TipMeritve == TipMeritveEnum.BOOL)
                            {
                                <InputCheckbox @bind-Value="atribut.Ocena.VrednostD_Bool" />
                            }
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    }

    @if (!OcenaPotrjena)
    {
        <button class="btn btn-success mt-3" @onclick="PotrdiOceno">Potrdi oceno</button>
    }
    else
    {
        <div class="izbira-metode-box mt-3">
            <label>Izberi metodo ocenjevanja:</label>
            <select @bind="IzbranaMetoda" class="form-select">
                <option value="standard">Glede na standard</option>
                <option value="zdraviUd">Glede na zdravi ud</option>
            </select>

            <p class="mt-2">
                <strong>Deficiti:</strong><br />
                - Standard: @DeficitStandard?.ToString("0.0")%<br />
                - Zdravi ud: @DeficitRelativno?.ToString("0.0")%
            </p>
        </div>
    }
</div>

@code {

    [Parameter] public Segment Segment { get; set; } = default!;
    [Parameter] public List<Atribut> Atributi { get; set; } = new();

    private bool OcenaPotrjena = false;
    private string IzbranaMetoda = "standard";
    private decimal? DeficitStandard;
    private decimal? DeficitRelativno;

    public enum MoznaPrimerjava
    {
        L_primerjava_S, //LD
        D_primerjava_S, //LD
        L_primerjava_D, //LD
        D_primerjava_L,//LD
        E_primerjava_S //E
    }

    public class IzmerjeniDelTelesaDeficit
    {
        public Segment IzmerjeniDelTelesa { get; set; }
        public decimal StandardSkupaj { get; set; }
        public decimal GibljivostSkupajL { get; set; }
        public decimal PolovicaGibljivostiL { get; set; }
        public decimal TretjinaGibljivostiL { get; set; }

        public decimal GibljivostSkupajD { get; set; }
        public decimal PolovicaGibljivostiD { get; set; }
        public decimal TretjinaGibljivostiD { get; set; }

        public decimal GibljivostSkupajE { get; set; }
        public decimal PolovicaGibljivostiE { get; set; }
        public decimal TretjinaGibljivostiE { get; set; }
    }

    public class MozniDeficit
    {
        public MoznaPrimerjava moznePrimerjave { get; set; }
        public decimal? Deficit { get; set; }
        public decimal? Odstotek { get; set; }
        public StranLDE StranLDE { get; set; }


    }


    private MozniDeficit MakeDeficit(MoznaPrimerjava tip, decimal dejanska, decimal referenca, StranLDE stranLDE)
    {
        if (Segment.SimetrijaDelaTelesa == SimetrijaDelaTelesa.E && stranLDE != StranLDE.E)
            return null;

        if (Segment.SimetrijaDelaTelesa == SimetrijaDelaTelesa.LD && stranLDE == StranLDE.E)
            return null;

    return new MozniDeficit
        {
            moznePrimerjave = tip,
            Deficit = CalcDeficit(dejanska, referenca),
            StranLDE = stranLDE
        };
    }

    public void IzracunajDeficit()
    {
        var izmerjeniDelTelesaDeficit = new IzmerjeniDelTelesaDeficit
            {
                IzmerjeniDelTelesa = Segment
            };

        var simetrija = Segment.SimetrijaDelaTelesa;  // enum, ki vrne LD ali E
        // seštej vse vrednosti v enem koraku
        izmerjeniDelTelesaDeficit.GibljivostSkupajL = Atributi.Sum(atr => atr.Ocena.VrednostL.AsDecimal());
        izmerjeniDelTelesaDeficit.GibljivostSkupajD = Atributi.Sum(atr => atr.Ocena.VrednostD.AsDecimal());
        izmerjeniDelTelesaDeficit.GibljivostSkupajE = Atributi.Sum(atr => atr.Ocena.VrednostE.AsDecimal());
        izmerjeniDelTelesaDeficit.StandardSkupaj = Atributi.Sum(atr => atr.StandardnaVrednost.AsDecimal());

        List<MozniDeficit> deficiti = new List<MozniDeficit>();

        var kandidati = new[]
        {
            MakeDeficit(MoznaPrimerjava.E_primerjava_S, izmerjeniDelTelesaDeficit.GibljivostSkupajE, izmerjeniDelTelesaDeficit.StandardSkupaj, StranLDE.E),
            MakeDeficit(MoznaPrimerjava.D_primerjava_S, izmerjeniDelTelesaDeficit.GibljivostSkupajD, izmerjeniDelTelesaDeficit.StandardSkupaj, StranLDE.D),
            MakeDeficit(MoznaPrimerjava.L_primerjava_S, izmerjeniDelTelesaDeficit.GibljivostSkupajL, izmerjeniDelTelesaDeficit.StandardSkupaj, StranLDE.L),
            MakeDeficit(MoznaPrimerjava.L_primerjava_D, izmerjeniDelTelesaDeficit.GibljivostSkupajL, izmerjeniDelTelesaDeficit.GibljivostSkupajD, StranLDE.L),
            MakeDeficit(MoznaPrimerjava.D_primerjava_L, izmerjeniDelTelesaDeficit.GibljivostSkupajD, izmerjeniDelTelesaDeficit.GibljivostSkupajL, StranLDE.D)
        };

        //Logger.LogInformation("L_primerjava_D" + " : " + deficiti.Last().Deficit);
        deficiti.AddRange(kandidati.Where(d => d != null)!);

        foreach (var d in deficiti)
        {
            Logger.LogInformation(
                "Primerjava: {Primerjava}, Stran: {Stran}, Deficit: {Deficit}%",
                d.moznePrimerjave,
                d.StranLDE,
                d.Deficit?.ToString("0.00")
            );
        }
    }


    private void PotrdiOceno()
    {
        IzracunajDeficit();

    }

    protected override async Task OnInitializedAsync()
    {
        var json = JsonSerializer.Serialize(Atributi, new JsonSerializerOptions { WriteIndented = true});

        foreach (Atribut atr in Atributi)
        {
            atr.Ocena = new();    
        }
        Logger.LogInformation("OcenjevalniAtribut.RAZOR->OnInitializedAsync {json}", json);
    }

    private decimal CalcDeficit(decimal dejanska, decimal referenca)
    {
        if (referenca == 0) return 0;
        var razlika = Math.Abs(referenca - dejanska);
        return Math.Round((razlika / referenca) * 100, 2);
    }


}