@using CustomTypeExtensions
@using IzracunInvalidnostiBlazor.Models
@using Microsoft.Extensions.Logging
@using Microsoft.Extensions.Options
@using System.Text.Json
@inject NavigationManager Nav
@inject ILogger<Index> Logger
@using Microsoft.AspNetCore.Mvc
@inject IOptions<JsonOptions> JsonOptions

    <!-- 1. Vnos atributov -->
<div class="p-3 border rounded">

    <span class="segment-atribut-title">@Segment.Opis</span>

    <!-- 1. Vnos atributov -->
    <AtributEditor Segment="Segment" FazaChanged="OnFazaChanged" />

    <!-- 2. Gumb Izračunaj -->
    @if (Segment.FazaOcenjevanja == FazaOcenjevanjaEnum.OceneSoVnesene
        || Segment.FazaOcenjevanja == FazaOcenjevanjaEnum.DeficitiIzbrani
        || Segment.FazaOcenjevanja == FazaOcenjevanjaEnum.DeficitiIzracunani
        || Segment.FazaOcenjevanja == FazaOcenjevanjaEnum.Vpogled
    )
    @*@if (AliSoOceneVnesene())*@
    {
        <div>
            <button class="btn btn-primary mb-3 btn-izracunaj" @onclick="IzracunajMozneDeficite">
                Izračunaj
            </button>
        </div>
    }

    <!-- 3. Dropdowni + debug -->
    @if (Segment.FazaOcenjevanja.In(FazaOcenjevanjaEnum.DeficitiIzracunani, FazaOcenjevanjaEnum.Vpogled))
    {
        <div class="deficit-selector-list">
            @{
                var strani = Segment.SimetrijaTelesa == SimetrijaTelesaEnum.LD
                ? new[] { StranLDE.L, StranLDE.D }
                : new[] { StranLDE.E };
            }

            @foreach (var stran in strani)
            {
                <DeficitWithCorrection Segment="Segment"
                                       Stran="@stran"
                                       OnSelectionChanged="OnDeficitChanged" />
            }
        </div>
        @*if (Segment.FazaOcenjevanja.In(FazaOcenjevanjaEnum.DeficitiIzbrani, FazaOcenjevanjaEnum.Vpogled))*@
        @if (LahkoPotrdi()) 
        {
            <button class="btn btn-success mt-3" @onclick="PotrdiIzracunanDeficit">
                Potrdi oceno
            </button>
        }

        <!-- Debug izpis -->
        <button class="btn btn-link mt-2" type="button" @onclick="ToggleDebug">
            🔍 Pokaži debug izpis
        </button>

        @if (ShowDebug)
        {
            <div class="card card-body mt-2">
                <h6>Debug podatki</h6>
                <ul>
                    <li>Standard skupaj: @Segment.IzmerjeniDeficit.StandardSkupaj</li>
                    <li>Gibljivost L: @Segment.IzmerjeniDeficit.GibljivostSkupajL</li>
                    <li>Gibljivost D: @Segment.IzmerjeniDeficit.GibljivostSkupajD</li>
                    <li>Gibljivost E: @Segment.IzmerjeniDeficit.GibljivostSkupajE</li>
                </ul>
                <h6>Možni deficiti</h6>
                <table class="table table-sm">
                    <thead>
                        <tr>
                            <th>Stran</th>
                            <th>Primerjava</th>                           
                            <th>Deficit %</th>
                            <th>Izračunani odstotek</th>
                        </tr>
                        </thead>
                    <tbody>
                        @foreach (var d in Segment.MozniDeficitNabor)
                        {
                            <tr>
                                <td>@d.StranLDE</td>
                                <td>@d.MoznaPrimerjava</td>                           
                                <td>@d.Deficit?.ToString("0.0") %</td>
                                <td>@d.IzracunaniOdstotek?.ToString("0.0")</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    }

</div>
@code {

    [Parameter] public Segment Segment { get; set; } = default!;
    [Parameter] public EventCallback<Segment> OnOcenaPotrjena { get; set; }

    private bool ShowDebug = false;

    private decimal? SelectedLPercent;
    private decimal? SelectedDPercent;
    private decimal? SelectedEPercent;

    private bool PrikaziKorekcijoL;
    private bool PrikaziKorekcijoD;
    private bool PrikaziKorekcijoE;

    private void OnDeficitChanged((StranLDE stran, decimal? val) change)
    {
        // Počisti prejšnje za dano stran
        Segment.ClearIzberiMozniDeficit(change.stran);

        // Označi novo, če obstaja
        if (change.val.HasValue)
        {
            Segment.IzberiMozniDeficit(change.stran, change.val.Value); 
        }
    }

    private bool LahkoPotrdi()
    {
        if (Segment.SimetrijaTelesa == SimetrijaTelesaEnum.LD)
            return Segment.IzbranDeficitL != null &&
                   Segment.IzbranDeficitD != null;

        if (Segment.SimetrijaTelesa == SimetrijaTelesaEnum.E)
            return Segment.IzbranDeficitE != null;

        return false;
    }

    private void ToggleKorekcija(StranLDE stran)
    {
        switch (stran)
        {
            case StranLDE.L: PrikaziKorekcijoL = !PrikaziKorekcijoL; break;
            case StranLDE.D: PrikaziKorekcijoD = !PrikaziKorekcijoD; break;
            case StranLDE.E: PrikaziKorekcijoE = !PrikaziKorekcijoE; break;
        }
    }

    private void IzracunajMozneDeficite()
    {
        // 1) agregati
        Segment.IzmerjeniDeficit = new();
        Segment.IzmerjeniDeficit.GibljivostSkupajL = Segment.Atributi.Sum(atr => atr.Ocena?.VrednostL ?? 0m);
        Segment.IzmerjeniDeficit.GibljivostSkupajD = Segment.Atributi.Sum(atr => atr.Ocena?.VrednostD ?? 0m);
        Segment.IzmerjeniDeficit.GibljivostSkupajE = Segment.Atributi.Sum(atr => atr.Ocena?.VrednostE ?? 0m);
        Segment.IzmerjeniDeficit.StandardSkupaj = Segment.Atributi.Sum(atr => atr.StandardnaVrednost ?? 0m);

        // 2) pripravi nabor kandidatov (počisti prejšnje rezultate!)
        Segment.MozniDeficitNabor ??= new List<MozniDeficit>();
        Segment.MozniDeficitNabor.Clear();

        // 3) zbere vse stopnje iz atributov trenutnega segmenta (za IzracunajInvalidnost)
        var vseStopnje = Segment.Atributi.SelectMany(a => a.Stopnje).ToList();

        // 4) sestavi kandidate v skladu s simetrijo
        if (Segment.SimetrijaTelesa == SimetrijaTelesaEnum.LD)
        {
            AddIfValid(MoznaPrimerjavaEnum.LS,
                       Segment.IzmerjeniDeficit.GibljivostSkupajL,
                       Segment.IzmerjeniDeficit.StandardSkupaj,
                       StranLDE.L,
                       vseStopnje);

            AddIfValid(MoznaPrimerjavaEnum.DS,
                       Segment.IzmerjeniDeficit.GibljivostSkupajD,
                       Segment.IzmerjeniDeficit.StandardSkupaj,
                       StranLDE.D,
                       vseStopnje);

            // medsebojna primerjava L-D in D-L, če želiš ponuditi tudi ta scenarij:
            AddIfValid(MoznaPrimerjavaEnum.LD,
                       Segment.IzmerjeniDeficit.GibljivostSkupajL,
                       Segment.IzmerjeniDeficit.GibljivostSkupajD,
                       StranLDE.L,
                       vseStopnje);

            AddIfValid(MoznaPrimerjavaEnum.DL,
                       Segment.IzmerjeniDeficit.GibljivostSkupajD,
                       Segment.IzmerjeniDeficit.GibljivostSkupajL,
                       StranLDE.D,
                       vseStopnje);
        }
        else if (Segment.SimetrijaTelesa == SimetrijaTelesaEnum.E)
        {
            AddIfValid(MoznaPrimerjavaEnum.ES,
                       Segment.IzmerjeniDeficit.GibljivostSkupajE,
                       Segment.IzmerjeniDeficit.StandardSkupaj,
                       StranLDE.E,
                       vseStopnje);
        }

        // 5) izloči duplikate po strani + izračunanem odstotku (če želiš konsolidirati)
        Segment.MozniDeficitNabor = Segment.MozniDeficitNabor
            .GroupBy(d => new { d.StranLDE, Percent = d.IzracunaniOdstotek ?? -1m, d.MoznaPrimerjava })
            .Select(g => g.First())
            .OrderBy(d => d.StranLDE)
            .ThenBy(d => d.IzracunaniOdstotek)
            .ToList();
        Segment.FazaOcenjevanja = FazaOcenjevanjaEnum.DeficitiIzracunani;
        log_segment();
    }

    private void ToggleDebug() => ShowDebug = !ShowDebug;

    private void OnFazaChanged(FazaOcenjevanjaEnum novaFaza)
    {
        Segment.FazaOcenjevanja = novaFaza;
        StateHasChanged(); // rerender parent
    }


    private bool AliSoOceneVnesene()
    {
        bool b = Segment.Atributi.All(a =>
             Segment.SimetrijaTelesa switch
             {
                 SimetrijaTelesaEnum.LD => a.Ocena?.VrednostL.HasValue == true && a.Ocena?.VrednostD.HasValue == true,
                 SimetrijaTelesaEnum.E => a.Ocena?.VrednostE.HasValue == true,
                 _ => false
             });

        if (b)
            Segment.FazaOcenjevanja = FazaOcenjevanjaEnum.OceneSoVnesene;
        return b;
    }
   
    
  private async Task PotrdiIzracunanDeficit()
  {
      //Segment.ClearIzberiMozniDeficit();
      await OnOcenaPotrjena.InvokeAsync(Segment);
  }


    protected override async Task OnInitializedAsync()
    {
        foreach (var atr in Segment.Atributi)
        {
            if (atr.Ocena == null)
                atr.Ocena = new();
        }
    }
    private void AddIfValid(MoznaPrimerjavaEnum tip, decimal dejanska, decimal referenca, StranLDE stran, List<StopnjaDeficita> vseStopnje)
    {
        // zaščita pred deljenjem z 0
        if (referenca == 0m) return;

        var deficit = CalcDeficit(dejanska, referenca);
        if (deficit >= 100m) return; // zavrzi očitno neveljavne ali ekstremne primere

        var odstotek = IzracunajInvalidnost(deficit, vseStopnje);

        Segment.MozniDeficitNabor.Add(new MozniDeficit
        {
            MoznaPrimerjava = tip,
            Deficit = deficit,
            StranLDE = stran,
            IzbiraOpis = $"{tip.GetDescription()}: {odstotek}",
            IzracunaniOdstotek = odstotek
        });
    }

    private decimal CalcDeficit(decimal dejanska, decimal referenca)
    {
        if (referenca == 0m) return 0m;
        var razlika = Math.Abs(referenca - dejanska);
        return Math.Round((razlika / referenca) * 100m, 1);
    }


    private void log_segment()
    {
        var json = JsonSerializer.Serialize(Segment, JsonOptions.Value.JsonSerializerOptions);
        Logger.LogInformation("OcenjevalniAtribut.razor->Segment {json}", json);
    }



    private decimal? IzracunajInvalidnost(decimal deficitPercent, List<StopnjaDeficita> stopnje)
    {
        if (stopnje == null || stopnje.Count == 0) return null;

        var coef = deficitPercent / 100m;

        // relativne (R) s numeričnimi mejami
        var relativne = stopnje
            .Where(s => s.OdstotekFR == OdstotekFR.R && s.ObmocjeNum.HasValue)
            .OrderBy(s => s.ObmocjeNum.Value)
            .ToArray();

        if (relativne.Length > 0)
        {
            if (coef <= relativne[0].ObmocjeNum) return relativne[0].StopnjaNum;

            var nextIndex = Array.FindIndex(relativne, s => coef <= s.ObmocjeNum);
            if (nextIndex >= 0)
            {
                var prev = relativne[nextIndex - 1];
                var next = relativne[nextIndex];
                var span = next.ObmocjeNum.Value - prev.ObmocjeNum.Value;
                var t = span == 0 ? 1 : (coef - prev.ObmocjeNum.Value) / span;
                return Math.Round(prev.StopnjaNum + t * (next.StopnjaNum - prev.StopnjaNum), 1);
            }

            return relativne[^1].StopnjaNum;
        }

        // fiksne (F)
        var fiksne = stopnje
            .Where(s => s.OdstotekFR == OdstotekFR.F)
            .OrderBy(s => s.ZapSt)
            .Select(s => s.StopnjaNum)
            .ToArray();

        if (fiksne.Length == 0) return null;
        if (coef <= 0) return 0;

        var idx = Math.Min((int)(coef * fiksne.Length), fiksne.Length - 1);
        return fiksne[idx];
    }

}
