@using CustomTypeExtensions
@using IzracunInvalidnostiBlazor.Models
@using IzracunInvalidnostiBlazor.Services
@using Microsoft.Extensions.Logging
@using Microsoft.Extensions.Options
@using System.Text.Json
@inject NavigationManager Nav
@inject ILogger<Index> Logger
@using Microsoft.AspNetCore.Mvc
@inject IOptions<JsonOptions> JsonOptions

    <!-- 1. Vnos atributov -->
<div class="p-3 border rounded">

    <span class="segment-atribut-title">@Segment.Opis</span>

    <!-- 1. Vnos atributov -->
    <AtributEditor Segment="Segment" FazaChanged="OnFazaChanged" />

    <!-- 2. Gumb Izračunaj -->
    @if (Segment.FazaOcenjevanja == FazaOcenjevanjaEnum.OceneSoVnesene
        || Segment.FazaOcenjevanja == FazaOcenjevanjaEnum.DeficitiIzbrani
        || Segment.FazaOcenjevanja == FazaOcenjevanjaEnum.DeficitiIzracunani
        || Segment.FazaOcenjevanja == FazaOcenjevanjaEnum.Vpogled
    )
    @*@if (AliSoOceneVnesene())*@
    {
        <div>
            <button class="btn btn-primary mb-3 btn-izracunaj" @onclick="IzracunajMozneDeficite">
                Izračunaj
            </button>
        </div>
    }

    <!-- 3. Dropdowni + debug -->
    @if (Segment.FazaOcenjevanja.In(FazaOcenjevanjaEnum.DeficitiIzracunani, FazaOcenjevanjaEnum.Vpogled))
    {
        <div class="deficit-selector-list">
            @{
                var strani = Segment.SimetrijaTelesa == SimetrijaTelesaEnum.LD
                ? new[] { StranLDE.L, StranLDE.D }
                : new[] { StranLDE.E };
            }

            @foreach (var stran in strani)
            {
                <DeficitWithCorrection Segment="Segment"
                                       Stran="@stran"
                                       OnSelectionChanged="OnDeficitChanged" />
            }
        </div>
        @*if (Segment.FazaOcenjevanja.In(FazaOcenjevanjaEnum.DeficitiIzbrani, FazaOcenjevanjaEnum.Vpogled))*@
        @if (LahkoPotrdi()) 
        {
            <button class="btn btn-success mt-3" @onclick="PotrdiIzracunanDeficit">
                Potrdi oceno
            </button>
        }

        <!-- Debug izpis -->
        <button class="btn btn-link mt-2" type="button" @onclick="ToggleDebug">
            🔍 Pokaži debug izpis
        </button>

        @if (ShowDebug)
        {
            <div class="card card-body mt-2">
                <h6>Debug podatki</h6>
                <ul>
                    <li>Standard skupaj: @Segment.IzmerjeniDeficit.StandardSkupaj</li>
                    <li>Gibljivost L: @Segment.IzmerjeniDeficit.GibljivostSkupajL</li>
                    <li>Gibljivost D: @Segment.IzmerjeniDeficit.GibljivostSkupajD</li>
                    <li>Gibljivost E: @Segment.IzmerjeniDeficit.GibljivostSkupajE</li>
                </ul>
                <h6>Možni deficiti</h6>
                <table class="table table-sm">
                    <thead>
                        <tr>
                            <th>Stran</th>
                            <th>Primerjava</th>                           
                            <th>Deficit %</th>
                            <th>Izračunani odstotek</th>
                        </tr>
                        </thead>
                    <tbody>
                        @foreach (var d in Segment.MozniDeficitNabor)
                        {
                            <tr>
                                <td>@d.StranLDE</td>
                                <td>@d.MoznaPrimerjava</td>                           
                                <td>@d.Deficit?.ToString("0.0") %</td>
                                <td>@d.IzracunaniOdstotek?.ToString("0.0")</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    }

</div>
@code {

    [Parameter] public Segment Segment { get; set; } = default!;
    [Parameter] public EventCallback<Segment> OnOcenaPotrjena { get; set; }

    private bool ShowDebug = false;

    private decimal? SelectedLPercent;
    private decimal? SelectedDPercent;
    private decimal? SelectedEPercent;

    private bool PrikaziKorekcijoL;
    private bool PrikaziKorekcijoD;
    private bool PrikaziKorekcijoE;

    private void OnDeficitChanged((StranLDE stran, decimal? val) change)
    {
        // Počisti prejšnje za dano stran
        Segment.ClearIzberiMozniDeficit(change.stran);

        // Označi novo, če obstaja
        if (change.val.HasValue)
        {
            Segment.IzberiMozniDeficit(change.stran, change.val.Value); 
        }
    }

    private bool LahkoPotrdi()
    {
        if (Segment.SimetrijaTelesa == SimetrijaTelesaEnum.LD)
            return Segment.IzbranDeficitL != null &&
                   Segment.IzbranDeficitD != null;

        if (Segment.SimetrijaTelesa == SimetrijaTelesaEnum.E)
            return Segment.IzbranDeficitE != null;

        return false;
    }

    private void ToggleKorekcija(StranLDE stran)
    {
        switch (stran)
        {
            case StranLDE.L: PrikaziKorekcijoL = !PrikaziKorekcijoL; break;
            case StranLDE.D: PrikaziKorekcijoD = !PrikaziKorekcijoD; break;
            case StranLDE.E: PrikaziKorekcijoE = !PrikaziKorekcijoE; break;
        }
    }

    private void IzracunajMozneDeficite()
    {
        DeficitCalculator.IzracunajMozneDeficite(Segment, msg => Logger.LogInformation(msg));
    }


    private void ToggleDebug() => ShowDebug = !ShowDebug;

    private void OnFazaChanged(FazaOcenjevanjaEnum novaFaza)
    {
        Segment.FazaOcenjevanja = novaFaza;
        StateHasChanged(); // rerender parent
    }


    private bool AliSoOceneVnesene()
    {
        bool b = Segment.Atributi.All(a =>
             Segment.SimetrijaTelesa switch
             {
                 SimetrijaTelesaEnum.LD => a.Ocena?.VrednostL.HasValue == true && a.Ocena?.VrednostD.HasValue == true,
                 SimetrijaTelesaEnum.E => a.Ocena?.VrednostE.HasValue == true,
                 _ => false
             });

        if (b)
            Segment.FazaOcenjevanja = FazaOcenjevanjaEnum.OceneSoVnesene;
        return b;
    }
   
    
  private async Task PotrdiIzracunanDeficit()
  {
      //Segment.ClearIzberiMozniDeficit();
      await OnOcenaPotrjena.InvokeAsync(Segment);
  }


    protected override async Task OnInitializedAsync()
    {
        foreach (var atr in Segment.Atributi)
        {
            if (atr.Ocena == null)
                atr.Ocena = new();
        }
    }


    private void log_segment()
    {
        var json = JsonSerializer.Serialize(Segment, JsonOptions.Value.JsonSerializerOptions);
        Logger.LogInformation("OcenjevalniAtribut.razor->Segment {json}", json);
    }



}
