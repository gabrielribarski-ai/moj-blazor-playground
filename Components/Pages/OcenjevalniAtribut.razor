@using CustomTypeExtensions
@using IzracunInvalidnostiBlazor.Models
@using IzracunInvalidnostiBlazor.Services
@using Microsoft.Extensions.Logging
@using Microsoft.Extensions.Options
@using System.Text.Json
@inject NavigationManager Nav
@inject ILogger<Index> Logger
@using Microsoft.AspNetCore.Mvc
@inject IOptions<JsonOptions> JsonOptions
@inject UserSessionStorageService UserSessionStorage
@inject LoaderService Loader

<div class="p-1 border rounded">

    <!-- 1. Vnos atributov -->
    <AtributEditor DelTelesa="DelTelesa" FazaChanged="OnFazaChanged" />

    <!-- 2. Gumb Izračunaj -->
    @if (DelTelesa.SegmentnaFaza.In(SegmentnaFaza.VrednostiSoVnesene, SegmentnaFaza.DeficitiIzracunani))
    {
        <div>
            <button class="btn btn-primary mb-3 btn-izracunaj" @onclick="IzracunajMozneDeficite">
                Izračunaj
            </button>
        </div>
    }

    <!-- 3. Dropdowni + debug -->
    @if (DelTelesa.SegmentnaFaza.In(SegmentnaFaza.DeficitiIzracunani))
    {
        <div class="deficit-selector-list">
            @{
                var strani = DelTelesa.SimetrijaTelesa == SimetrijaEnum.LD
                ? new[] { StranLDE.L, StranLDE.D }
                : new[] { StranLDE.E };
            }

            @foreach (var stran in strani)
            {
                <DeficitWithCorrection DelTelesa="DelTelesa"
                                       Stran="@stran"
                                       GlobalnaFaza="@user.GlobalnaFaza"
                                       OnSelectionChanged="OnDeficitChanged" />
            }
        </div>

        @if (LahkoPotrdi())
        {
            <button class="btn btn-success" @onclick="PotrdiIzracunanDeficit">
                Potrdi oceno
            </button>
        }

        <!-- Debug izpis -->
        <button class="btn btn-link" type="button" @onclick="ToggleDebug">
            🔍 Pokaži debug izpis
        </button>

        @if (ShowDebug)
        {
            <div class="card card-body">
                <h6>Debug podatki</h6>
                <ul>
                    <li>Standard skupaj: @DelTelesa.IzmerjeniDeficit.StandardSkupaj</li>
                    <li>Gibljivost L: @DelTelesa.IzmerjeniDeficit.GibljivostSkupajL</li>
                    <li>Gibljivost D: @DelTelesa.IzmerjeniDeficit.GibljivostSkupajD</li>
                    <li>Gibljivost E: @DelTelesa.IzmerjeniDeficit.GibljivostSkupajE</li>
                </ul>
                <h6>Možni deficiti</h6>

                <table class="table table-sm table-bordered atributi-tabela">
                    <thead>
                        <tr>
                            <th>Stran</th>
                            <th>Primerjava</th>
                            <th>Deficit %</th>
                            <th>Izračunani odstotek</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var d in DelTelesa.MozniDeficitSeznam)
                        {
                            <tr>
                                <td>@d.StranLDE</td>
                                <td>@d.MoznaPrimerjava</td>
                                <td>@d.Deficit?.ToString("0.0") %</td>
                                <td>@d.IzracunaniOdstotek?.ToString("0.0")</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    }

</div>

@code {
    [Parameter] public DelTelesa DelTelesa { get; set; } = default!;
    [Parameter] public EventCallback<DelTelesa> OnOcenaPotrjena { get; set; }

    private bool ShowDebug = false;

    private PrijavljenUporabnik user;

    private bool PrikaziKorekcijoL;
    private bool PrikaziKorekcijoD;
    private bool PrikaziKorekcijoE;

    private void OnDeficitChanged((StranLDE stran, decimal? val) change)
    {
        // Počisti prejšnje za dano stran
        DelTelesa.ClearIzberiMozniDeficit(change.stran);

        // Označi novo, če obstaja
        if (change.val.HasValue)
        {
            DelTelesa.IzberiMozniDeficit(change.stran, change.val.Value);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        // preberemo userja iz session storage
        await Loader.RunWithLoader("", async () =>
        {
            user = await UserSessionStorage.LoadUserAsync();
        });
        foreach (var atr in DelTelesa.Atributi)
        {
            if (atr.Ocena == null)
                atr.Ocena = new();
        }
    }

    private bool LahkoPotrdi()
    {
        if (DelTelesa.SegmentnaFaza.In(SegmentnaFaza.VrednostiSoVnesene))
        //if (user.GlobalnaFaza.In(GlobalnaFaza.OcenjevanjePotrjeno, GlobalnaFaza.OcenjevanjeZakljuceno))
            return false;

        if (DelTelesa.SimetrijaTelesa == SimetrijaEnum.LD)
            return DelTelesa.IzbranDeficitL != null &&
                   DelTelesa.IzbranDeficitD != null;

        if (DelTelesa.SimetrijaTelesa == SimetrijaEnum.E)
            return DelTelesa.IzbranDeficitE != null;

        return false;
    }

    private void ToggleKorekcija(StranLDE stran)
    {
        switch (stran)
        {
            case StranLDE.L: PrikaziKorekcijoL = !PrikaziKorekcijoL; break;
            case StranLDE.D: PrikaziKorekcijoD = !PrikaziKorekcijoD; break;
            case StranLDE.E: PrikaziKorekcijoE = !PrikaziKorekcijoE; break;
        }
    }

    private void IzracunajMozneDeficite()
    {
        DeficitCalculator.IzracunajMozneDeficite(DelTelesa , msg => Logger.LogInformation(msg));
    }


    private void ToggleDebug() => ShowDebug = !ShowDebug;

    private void OnFazaChanged(SegmentnaFaza novaFaza)
    {
        DelTelesa.SegmentnaFaza = novaFaza;
        StateHasChanged(); // rerender parent
    }

    
  private async Task PotrdiIzracunanDeficit()
  {
      //Segment.ClearIzberiMozniDeficit();
        //user.GlobalnaFaza = GlobalnaFaza.OcenjevanjePotrjeno;
        DelTelesa.SegmentnaFaza = SegmentnaFaza.DeficitiIzracunani;  
        await OnOcenaPotrjena.InvokeAsync(DelTelesa);
  }


    private void log_segment()
    {
        var json = JsonSerializer.Serialize(DelTelesa, JsonOptions.Value.JsonSerializerOptions);
        Logger.LogInformation("OcenjevalniAtribut.razor->DelTelesa {json}", json);
    }



}
