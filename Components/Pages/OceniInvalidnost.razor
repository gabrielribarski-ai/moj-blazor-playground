@page "/oceni-invalidnost"
@using IzracunInvalidnostiBlazor.Extensions
@using IzracunInvalidnostiBlazor.Models
@using IzracunInvalidnostiBlazor.Services
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.Extensions.Logging
@inject NavigationManager NavigationManager
@inject OcenjevalniModelLoader ocenjevalniModelLoader
@inject ProtectedSessionStorage SessionStorage
@inject ILogger<Index> Logger
@rendermode InteractiveServer


<h3>Oceni invalidnost</h3>

@if (ocenjevalniModel?.trenutniSegment == null)
{
    <p>Nalaganje podatkov...</p>
}
else
{
    
    var pot = ocenjevalniModel.GetBreadcrumbPath(ocenjevalniModel?.trenutniSegment?.SegmentId);
    //var otroci = segmenti.GetSegmentChildren(TrenutniSegment.SegmentId);
    <div class="trenutna-pot-box">
        @foreach (var korak in pot)
        {
            <span @onclick="@(() => NavigirajNaSegment(korak))"
                  style="cursor:pointer; text-decoration:underline;"
                  @key="korak.SegmentId">
                @korak.Opis
            </span>
            @if (!ReferenceEquals(korak, pot.Last()))
            {
                <span> &gt; </span>
            }
        }
    </div>
    
    
    @if (ocenjevalniModel?.AtributiZaPrikaz?.Count > 0)
    {
        <OcenjevalniAtribut Segment="ocenjevalniModel?.trenutniSegment" @key="ocenjevalniModel?.trenutniSegment?.SegmentId" OnOcenaPotrjena="DodajOcenjenSegment" />
    }
    
    @foreach (var podsegment in ocenjevalniModel?.SegmentiZaPrikaz)
    {
        <DelTelesa Segment="podsegment"  OnNavigate="NavigirajNaSegment" @key="podsegment.SegmentId" />
    }

    <!-- Container že ocenjenih segmentov -->
    @if (OcenjeniSegmenti.Any())
    {
        <div class="mt-4 p-3 border rounded bg-light">
            <h5>Že ocenjeni segmenti</h5>
            <ul class="list-group">
                @foreach (var seg in OcenjeniSegmenti)
                {
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        <span>
                            @seg.Opis –
                            @(seg.MozniDeficitNabor?.Max(d => d.IzracunaniOdstotek) ?? 0) %
                        </span>
                        <button class="btn btn-sm btn-outline-primary"
                                @onclick="() => UrediSegment(seg)">
                            Uredi
                        </button>
                    </li>
                }
            </ul>

            <p class="mt-3">
                <strong>Skupni % invalidnosti:</strong> @SkupnaInvalidnost %
            </p>
        </div>
    }
}

@code {
    private bool _initialized = false;
    private Segment? TrenutniSegment;

    private OcenjevalniModel ocenjevalniModel;

    private List<Segment> OcenjeniSegmenti = new();
    private decimal SkupnaInvalidnost;

    private List<Segment> BreadcrumbPath = new();

    private void IzberiSegment(Segment seg)
    {
        TrenutniSegment = seg;
        // posodobi breadcrumb pot
        BreadcrumbPath = BuildBreadcrumb(seg);
    }

    private List<Segment> BuildBreadcrumb(Segment seg)
    {
        var path = new List<Segment>();
        var current = seg;
        while (current != null)
        {
            path.Insert(0, current);
            // če imaš referenco na nadsegment, jo uporabi
            current = null; // TODO: poveži z modelom
        }
        return path;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            ocenjevalniModel = await ocenjevalniModel.ReadFromSessionStorage(SessionStorage);
            StateHasChanged(); // Optional; OnAfterRenderAsync usually doesn’t need it after firstRender
        }
    }

    private async Task NavigirajNaSegment(Segment segment)
    {
        await ocenjevalniModel.TrenutniSegmentSet(segment.SegmentId);
        var atr = ocenjevalniModel?.AtributiZaPrikaz;
        if (atr?.Count > 0)
        {
            var json = System.Text.Json.JsonSerializer.Serialize(atr);
            Logger.LogInformation("ocenjevalniModelLoader?.ocenjevalniModel?.AtributiZaPrikaz", json);
        }
        //StateHasChanged();
    }

    private void DodajOcenjenSegment(Segment seg)
    {
        // če segment že obstaja, ga zamenjaj
        var existing = OcenjeniSegmenti.FirstOrDefault(s => s.SegmentId == seg.SegmentId);
        if (existing != null)
            OcenjeniSegmenti.Remove(existing);

        OcenjeniSegmenti.Add(seg);
        IzracunajSkupnoInvalidnost();
    }

    private void IzracunajSkupnoInvalidnost()
    {
        // 🔹 tukaj lahko uporabiš svojo medicinsko formulo (zaenkrat navaden seštevek)
        SkupnaInvalidnost = OcenjeniSegmenti
            .Sum(s => s.MozniDeficitNabor?.Max(d => d.IzracunaniOdstotek) ?? 0);
    }


    private void UrediSegment(Segment seg)
    {
        TrenutniSegment = seg;
    }

    /*
    private void FiltrirajAtribute()
    {
        atributiZaTrenutniSegment.Clear();

        if (TrenutniSegment is null || vsiAtributi.Count == 0)
            return;

        // POZOR: Tip in oblika ID-ja — poravnaj ju (trim/upper/pretvorba)
        var segId = TrenutniSegment.SegmentId?.ToString()?.Trim();

        atributiZaTrenutniSegment = vsiAtributi
            .Where(a => string.Equals(
                a.SegmentId?.ToString()?.Trim(),
                segId,
                StringComparison.OrdinalIgnoreCase))
            .OrderBy(a => a.AtributId)
            .ToList();
    }
    */

}
