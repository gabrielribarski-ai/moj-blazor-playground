@page "/oceni-invalidnost"
@using CustomTypeExtensions
@using IzracunInvalidnostiBlazor.Extensions
@using IzracunInvalidnostiBlazor.Models
@using IzracunInvalidnostiBlazor.Services
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.Extensions.Logging
@inject NavigationManager NavigationManager
@inject DataDBLoader DataDBLoader
@inject ProtectedSessionStorage SessionStorage
@inject ILogger<Index> Logger
@rendermode InteractiveServer
@inject IConfiguration _config
@inject UserSessionStorageService UserSessionStorage
@inject LoaderService Loader
@inject BlazorDownloadFile.IBlazorDownloadFileService DownloadService

<!--
<h6>Izberi del telesa za ocenjevanje</h6>
-->

@if (user?.OcenjevalniModel?.TrenutniDelTelesa != null)
{
    <div class="row">
        <!-- Leva stran: glavni del -->
        <div class="col-md-6 small-font">
            <!-- Breadcrumb -->
            <div class="trenutna-pot-box mb-3">
                @foreach (var korak in user?.OcenjevalniModel?.BreadcrumbPath)
                {
                    var isLast = korak == user?.OcenjevalniModel?.BreadcrumbPath.Last();

                    <span class="crumb @(isLast ? "active" : "")"
                          @onclick="@(() => NavigirajNaSegment(korak))"
                          @key="korak.DelTelesaId">
                        @korak.Opis
                    </span>

                    @if (!isLast)
                    {
                        <span class="separator">🞂</span>
                    }
                }
            </div>


            <!-- Atributi -->
            @if (user?.OcenjevalniModel?.AtributiZaPrikaz?.Count > 0)
            {
                <OcenjevalniAtribut DelTelesa="user?.OcenjevalniModel.TrenutniDelTelesa"
                                    @key="user?.OcenjevalniModel?.TrenutniDelTelesa?.DelTelesaId"
                                    OnOcenaPotrjena="OcenaJePotrjena" />

                <!-- Gumb takoj pod seznamom atributov, poravnan desno -->
                <div class="d-flex justify-content-end mb-2">
                    <button class="btn btn-subtle" @onclick="ToggleDodatneTocke">
                        @(PrikaziDodatneTocke ? "▲ Skrij stopnje" : "▼ Prikaži stopnje")
                    </button>
                </div>

@if (PrikaziDodatneTocke)
{
    <div class="border-start ps-3 mb-3 text-muted small">
        @{
            var tockaOpis = user?.OcenjevalniModel?.AtributiZaPrikaz?
                .SelectMany(a => a.Stopnje)
                .FirstOrDefault()?.TockaOpis;
        }

        @if (!string.IsNullOrWhiteSpace(tockaOpis))
        {
            <div class="fw-semibold mb-1">@tockaOpis</div>
        }

        <div class="fw-light mb-2">Možne stopnje</div>

        <table class="table table-sm table-borderless mb-0">
            <thead class="text-muted small">
                <tr>
                    <th>Zap. št.</th>
                    <th>Opis</th>
                    <th>Stopnja</th>
                </tr>
            </thead>
            <tbody>
                @{
                    var stopnjeDistinct = user?.OcenjevalniModel?.AtributiZaPrikaz?
                        .SelectMany(a => a.Stopnje)
                        .GroupBy(s => s.StopnjaNum)
                        .Select(g => g.First())
                        .OrderBy(s => s.StopnjaNum)
                        .ToList();
                }
                @if (stopnjeDistinct != null)
                {
                    foreach (var stopnja in stopnjeDistinct)
                    {
                        <tr>
                            <td>@stopnja.ZapSt</td>
                            <td>@stopnja.StopnjaOpis</td>
                            <td>@stopnja.StopnjaNum</td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
}

            
            }

            <!-- Podsegmenti -->
            <div class="podsegment-list mb-2">
                @foreach (var seg in user?.OcenjevalniModel?.DeliTelesaZaPrikazSeznam)
                {
                    <div class="card podsegment-card mb-2"
                         @onclick="() => NavigirajNaSegment(seg)"
                         @key="seg.DelTelesaId">
                        <div class="card-body d-flex align-items-center">
                            <i class="bi bi-diagram-3 me-2 text-primary"></i>
                            <span>@seg.Opis</span>
                        </div>
                    </div>
                }
            </div>
        </div>

        <!-- Desna stran: že ocenjeni deli telesa -->
        <div class="col-md-6 small-font">
            @if (user?.OcenaSeznam?.Any() == true)
            {
                <div class="p-3 border rounded bg-light sticky-top" style="top: 1rem;">
                    <h5>Že ocenjeni segmenti</h5>

                    <ul class="list-group small">
                        @foreach (var ocena in user?.OcenaSeznam)
                        {
                            var del = user.OcenjevalniModel.DelTelesaSeznam
                            .FirstOrDefault(x => x.DelTelesaId == ocena.DelTelesaId);

                            <li class="list-group-item d-flex align-items-center">
                                <!-- Leva stran: opis -->
                                <div class="flex-grow-1">
                                    <b>@del?.DelTelesaTreePathDisplay</b>
                                    @if (ocena.UporabljenaKorekcija)
                                    {
                                        <span class="badge badge-korekcija ms-2">Korekcija</span>
                                    }
                                </div>

                                <!-- Sredina: odstotek -->
                                <div class="text-end" style="width: 70px;">
                                    @ocena.KoncnaOcena %
                                </div>

                                <!-- Desno: gumb -->
                                <div class="ms-2">
                                    <button class="btn btn-sm btn-outline-primary"
                                            @onclick="() => user.VpogledVOcenjeniDelTelesa(ocena.DelTelesaId)">
                                        Vpogled
                                    </button>
                                      @if (user.GlobalnaFaza != GlobalnaFaza.OcenjevanjeZakljuceno)
                                      {
                                       <button class="btn btn-sm btn-outline-danger"
                                                title="Odstrani oceno"
                                                @onclick="() => user.OdstraniOceno(ocena.DelTelesaId)">❌
                                       </button>
                                      }
                                </div>
                            </li>
                        }
                    </ul>

                    <!-- Skupna ocena -->
                    @if (user?.SkupnaOcena != null)
                    {
                        <div class="progress mt-2" style="height: 20px;">
                            <div class="progress-bar bg-warning" role="progressbar"
                                 style="width:@user.SkupnaOcena.ToCssPercentValue()%">
                            </div>
                            <span class="progress-label">@user.SkupnaOcena.ToLocalizedPercent()</span>
                        </div>
                    }

                    <!-- Končna ocena -->
                    @if (user?.KoncnaOcena != null)
                    {
                        <div class="alert alert-info mt-2">
                            <strong>Končna ocena:</strong> @user.KoncnaOcena %
                            @if (user.UporabljenaKorekcija == true)
                            {
                                <span class="badge bg-warning text-dark ms-2">Korekcija</span>
                            }
                            @if (!string.IsNullOrWhiteSpace(user.KoncniKomentar))
                            {
                                <div class="mt-1"><em>@user.KoncniKomentar</em></div>
                            }
                        </div>
                    }

                    <!-- Zaključevanje -->
@if (ImaVsajEnoOceno)
{
    <div class="mt-2 p-2 border rounded bg-light">
        @switch (user?.GlobalnaFaza)
        {
            case GlobalnaFaza.Ocenjevanje:
                <!-- Samo gumb, brez naslova -->
                <button class="btn btn-primary"
                        @onclick="() => user.ZamenjajFazo(GlobalnaFaza.OcenjevanjePotrjeno)">
                    ✅ Potrdi zaključek meritev
                </button>
                break;

            case GlobalnaFaza.OcenjevanjePotrjeno:
                <!-- Kulturno navodilo -->
                <p class="text-muted small mb-2">
                    Če želite, lahko ob zaključku dodate svojo ročno oceno (%) in komentar,
                    ki bosta vključena v končno poročilo.
                </p>

                <div class="mb-2">
                    <label class="form-label">Ročna korekcija skupnega odstotka</label>
                    <input type="number"
                           class="form-control form-control-sm"
                           @bind="ManualCorrection"
                           min="0" max="100" step="0.1" />
                </div>

                <div class="mb-2">
                    <label class="form-label">Komentar zdravnika</label>
                    <textarea class="form-control form-control-sm"
                              rows="3"
                              @bind="FinalComment"></textarea>
                </div>

                <button class="btn btn-success"
                        @onclick="ZakljuciOcenjevanje">
                    ✅ Zaključi ocenjevanje
                </button>
                break;

            case GlobalnaFaza.OcenjevanjeZakljuceno:
                <h5>Ocenjevanje zaključeno</h5>
                <p class="text-muted small mb-2">
                    Ocenjevanje je zaključeno. Sedaj lahko ustvarite uradno poročilo v obliki PDF.
                </p>

                <button class="btn btn-primary" @onclick="Prenesi">
                    📄 Generiraj PDF
                </button>
                break;
        }
    </div>
}

                </div>
            }
        </div>

    </div>
}
@code {

    private PrijavljenUporabnik user;
    private List<DelTelesa> OcenjeniDeliTelesa = new();
    private List<DelTelesa> BreadcrumbPath = new();
    private bool ImaVsajEnoOceno => user?.OcenaSeznam?.Any() == true;
    private decimal? ManualCorrection { get; set; }
    private string? FinalComment { get; set; }
    private string? ValidationMessage { get; set; }
    private bool PrikaziDodatneTocke = false;

    private void ToggleDodatneTocke()
    {
        PrikaziDodatneTocke = !PrikaziDodatneTocke;
    }

    protected override async Task OnInitializedAsync()
    {
        await Loader.RunWithLoader("", async () =>
        {
            user = await UserSessionStorage.LoadUserAsync();
        });
    }

    private async Task OcenaJePotrjena(Models.DelTelesa seg)
    {
        user.DodajMedOcenjene(seg);
        await Loader.RunWithLoader("", async () =>
        {
            await user.OcenjevalniModel.SetTrenutniDelTelesa(user?.OcenjevalniModel.GetRoot().DelTelesaId);
            await UserSessionStorage.SaveUserAsync(user);
        });
    }


    private async Task NavigirajNaSegment(Models.DelTelesa segment)
    {
        await user.OcenjevalniModel.SetTrenutniDelTelesa(segment.DelTelesaId);
        //await user.OcenjevalniModel.SaveSessionToStorage(SessionStorage);
        var atr = user.OcenjevalniModel?.AtributiZaPrikaz;
        if (atr?.Count > 0)
        {
            var json = System.Text.Json.JsonSerializer.Serialize(atr);
            Logger.LogInformation("Atributi za prikaz: {json}", json);
        }
    }

    private string GetBarColor(decimal? value)
    {
        if (value == null) return "bg-secondary";
        if (value < 30) return "bg-success";
        if (value < 60) return "bg-warning";
        return "bg-danger";
    }


    private void ZakljuciOcenjevanje()
    {
        // Če je vnesena ročna korekcija, mora biti komentar obvezen
        if (ManualCorrection.HasValue && string.IsNullOrWhiteSpace(FinalComment))
        {
            ValidationMessage = "Ročna korekcija skupnega odstotka zahteva obrazložitev.";
            return;
        }

        var finalScore = ManualCorrection ?? user?.SkupnaOcena;

        if (user != null)
        {
            user.KoncnaOcena = finalScore;
            user.UporabljenaKorekcija = ManualCorrection.HasValue;
            user.KoncniKomentar = FinalComment;
            user.ZamenjajFazo(GlobalnaFaza.OcenjevanjeZakljuceno);
            //StateHasChanged();
        }

        ValidationMessage = null; // počisti opozorilo
        Console.WriteLine($"Zaključeno z oceno {finalScore} in komentarjem: {FinalComment}");
    }

    private async Task Prenesi()
    {
        var status = PdfReportHelper.GenerateReport(user);

        if (status.ReportCompleted && status.FileBytes != null)
        {
            await DownloadService.DownloadFile(
                status.FileName ?? "izvid.pdf",
                status.FileBytes,
                status.ContentType ?? "application/pdf");
        }
    }



}
