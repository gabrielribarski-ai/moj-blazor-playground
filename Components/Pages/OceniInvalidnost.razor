@page "/oceni-invalidnost"
@using IzracunInvalidnostiBlazor.Extensions
@using IzracunInvalidnostiBlazor.Models
@using IzracunInvalidnostiBlazor.Services
@using CustomTypeExtensions
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.Extensions.Logging
@inject NavigationManager NavigationManager
@inject OcenjevalniModelLoader ocenjevalniModelLoader
@inject ProtectedSessionStorage SessionStorage
@inject ILogger<Index> Logger
@rendermode InteractiveServer


<h3>Oceni invalidnost</h3>

@if (ocenjevalniModel?.trenutniSegment == null)
{
    <p>Nalaganje podatkov...</p>
}
else
{
    
    var pot = ocenjevalniModel.GetBreadcrumbPath(ocenjevalniModel?.trenutniSegment?.SegmentId);
    //var otroci = segmenti.GetSegmentChildren(TrenutniSegment.SegmentId);
    <div class="trenutna-pot-box">
        @foreach (var korak in pot)
        {
            <span @onclick="@(() => NavigirajNaSegment(korak))"
                  style="cursor:pointer; text-decoration:underline;"
                  @key="korak.SegmentId">
                @korak.Opis
            </span>
            @if (!ReferenceEquals(korak, pot.Last()))
            {
                <span> &gt; </span>
            }
        }
    </div>
    
    
    @if (ocenjevalniModel?.AtributiZaPrikaz?.Count > 0)
    {
        <OcenjevalniAtribut Segment="ocenjevalniModel?.trenutniSegment" @key="ocenjevalniModel?.trenutniSegment?.SegmentId" OnOcenaPotrjena="OnSegmentPotrjen" />
    }
    
    @foreach (var podsegment in ocenjevalniModel?.SegmentiZaPrikaz)
    {
        <DelTelesa Segment="podsegment"  OnNavigate="NavigirajNaSegment" @key="podsegment.SegmentId" />
    }

    @if (OcenjeniSegmenti.Any())
    {
        <h4>Že ocenjeni segmenti</h4>
        <ul class="list-group">
            @foreach (var seg in OcenjeniSegmenti)
            {
                var izbrani = seg.MozniDeficitNabor.Where(d => d.JeIzbran).ToList();
                decimal? l = izbrani.FirstOrDefault(d => d.StranLDE == StranLDE.L)?.IzracunaniOdstotek;
                decimal? d = izbrani.FirstOrDefault(d => d.StranLDE == StranLDE.D)?.IzracunaniOdstotek;
                decimal? e = izbrani.FirstOrDefault(d => d.StranLDE == StranLDE.E)?.IzracunaniOdstotek;

                <li class="list-group-item">
                    <div class="row align-items-center">
                        <div class="col-3">
                            <b>@seg.Opis</b>
                        </div>

                        @if (e.HasValue)
                        {
                            <div class="col text-end">
                                Odstotek: @e.Value.ToString("0.0") %
                            </div>
                        }
                        else
                        {
                            <div class="col text-end">
                                <div class="row">
                                    <div class="col">L: @(l?.ToString("0.0") ?? "-") %</div>
                                    <div class="col">D: @(d?.ToString("0.0") ?? "-") %</div>
                                    <div class="col"><b>@((l ?? 0) + (d ?? 0)).ToString("0.0") %</b></div>
                                </div>
                            </div>
                        }

                        <div class="col-auto text-end">
                            <button class="btn btn-sm btn-outline-primary" @onclick="() => UrediSegment(seg)">
                                Vpogled / Popravek
                            </button>
                        </div>
                    </div>
                </li>
            }

            <!-- Povzetek vseh segmentov -->
            @{
                var total = OcenjeniSegmenti.Sum(seg =>
                {
                    var izbrani = seg.MozniDeficitNabor.Where(d => d.JeIzbran).ToList();
                    var l = izbrani.FirstOrDefault(d => d.StranLDE == StranLDE.L)?.IzracunaniOdstotek ?? 0;
                    var d = izbrani.FirstOrDefault(d => d.StranLDE == StranLDE.D)?.IzracunaniOdstotek ?? 0;
                    var e = izbrani.FirstOrDefault(d => d.StranLDE == StranLDE.E)?.IzracunaniOdstotek ?? 0;
                    return l + d + e;
                });
            }
            <li class="list-group-item list-group-item-secondary">
                <div class="d-flex justify-content-between">
                    <b>Skupaj vseh segmentov:</b>
                    <span>@total.ToString("0.0") %</span>
                </div>
            </li>
        </ul>
    }



}

@code {
    private bool _initialized = false;
    private Segment? TrenutniSegment;

    private OcenjevalniModel ocenjevalniModel;

    private List<Segment> OcenjeniSegmenti = new();
    private decimal SkupnaInvalidnost;

    private List<Segment> BreadcrumbPath = new();

    private void IzberiSegment(Segment seg)
    {
        TrenutniSegment = seg;
        // posodobi breadcrumb pot
        BreadcrumbPath = BuildBreadcrumb(seg);
    }

    private List<Segment> BuildBreadcrumb(Segment seg)
    {
        var path = new List<Segment>();
        var current = seg;
        while (current != null)
        {
            path.Insert(0, current);
            // če imaš referenco na nadsegment, jo uporabi
            current = null; // TODO: poveži z modelom
        }
        return path;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            ocenjevalniModel = await ocenjevalniModel.ReadFromSessionStorage(SessionStorage);
            StateHasChanged(); // Optional; OnAfterRenderAsync usually doesn’t need it after firstRender
        }
    }

    private void OnSegmentPotrjen(Segment seg)
    {
        var idx = OcenjeniSegmenti.FindIndex(s => s.SegmentId == seg.SegmentId);
        if (idx >= 0)
            OcenjeniSegmenti[idx] = seg;
        else
            OcenjeniSegmenti.Add(seg);
    }




    private async Task NavigirajNaSegment(Segment segment)
    {
        await ocenjevalniModel.TrenutniSegmentSet(segment.SegmentId);
        var atr = ocenjevalniModel?.AtributiZaPrikaz;
        if (atr?.Count > 0)
        {
            var json = System.Text.Json.JsonSerializer.Serialize(atr);
            Logger.LogInformation("ocenjevalniModelLoader?.ocenjevalniModel?.AtributiZaPrikaz", json);
        }
        //StateHasChanged();
    }



    private void IzracunajSkupnoInvalidnost()
    {
        // 🔹 tukaj lahko uporabiš svojo medicinsko formulo (zaenkrat navaden seštevek)
        SkupnaInvalidnost = OcenjeniSegmenti
            .Sum(s => s.MozniDeficitNabor?.Max(d => d.IzracunaniOdstotek) ?? 0);
    }


    private void UrediSegment(Segment seg)
    {
        TrenutniSegment = seg;
    }



}
