@page "/oceni-invalidnost"
@using IzracunInvalidnostiBlazor.Services
@inject SessionStorageService Storage
@inject NavigationManager NavigationManager
@inject SegmentService segmenti
@inject PogojAtributNaborLoader AtributLoader
@rendermode InteractiveServer

<h3>Oceni invalidnost</h3>

@if (segmentiZaPrikaz == null || TrenutniSegment == null)
{
    <p>Nalaganje podatkov...</p>
}
else
{
    var pot = segmenti.GetBreadcrumbPath(TrenutniSegment.SegmentId);
    var otroci = segmenti.GetSegmentChildren(TrenutniSegment.SegmentId);

    <div class="trenutna-pot-box">
        @foreach (var korak in pot)
        {
            <span @onclick="@(() => NavigirajNaSegment(korak))"
                  style="cursor:pointer; text-decoration:underline;"
                  @key="korak.SegmentId">
                @korak.Opis
            </span>
            @if (!ReferenceEquals(korak, pot.Last()))
            {
                <span> &gt; </span>
            }
        }
    </div>

    @if (atributiZaTrenutniSegment.Any())
    {
        <OcenjevalniAtribut Segment="TrenutniSegment"
                            Atributi="atributiZaTrenutniSegment"
                            @key="TrenutniSegment.SegmentId" />
    }

    @foreach (var podsegment in otroci)
    {
        <DelTelesa Segment="podsegment"
                   OnNavigate="NavigirajNaSegment"
                   @key="podsegment.SegmentId" />
    }
}

@code {
    private bool _initialized = false;
    private List<Segment> segmentiZaPrikaz = new();
    private Segment? TrenutniSegment;

    private List<Atribut> vsiAtributi = new();
    private List<Atribut> atributiZaTrenutniSegment = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_initialized)
        {
            var pogojIdStr = await Storage.GetItemAsync<string>("izbraniPogojId");
            if (!int.TryParse(pogojIdStr, out var pogojId))
            {
                NavigationManager.NavigateTo("/");
                return;
            }

            // 1) Segmenti
            await segmenti.PreberiSegmenteDB();
            segmentiZaPrikaz = segmenti.GetRootSegments();
            TrenutniSegment = segmenti.GetRootSegment();

            // 2) Atributi
            vsiAtributi = await AtributLoader.LoadForPogojAsync(pogojId);

            // 3) Prvi filter
            FiltrirajAtribute();

            _initialized = true;
            StateHasChanged();
        }
    }

    private void NavigirajNaSegment(Segment segment)
    {
        TrenutniSegment = segment;
        FiltrirajAtribute();
        StateHasChanged();
    }

    private void FiltrirajAtribute()
    {
        atributiZaTrenutniSegment.Clear();

        if (TrenutniSegment is null || vsiAtributi.Count == 0)
            return;

        // POZOR: Tip in oblika ID-ja — poravnaj ju (trim/upper/pretvorba)
        var segId = TrenutniSegment.SegmentId?.ToString()?.Trim();

        atributiZaTrenutniSegment = vsiAtributi
            .Where(a => string.Equals(
                a.SegmentId?.ToString()?.Trim(),
                segId,
                StringComparison.OrdinalIgnoreCase))
            .OrderBy(a => a.AtributId)
            .ToList();
    }
}
