@page "/oceni-invalidnost"
@using IzracunInvalidnostiBlazor.Extensions
@using IzracunInvalidnostiBlazor.Models
@using IzracunInvalidnostiBlazor.Services
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.Extensions.Logging
@inject NavigationManager NavigationManager
@inject OcenjevalniModelLoader ocenjevalniModelLoader
@inject ProtectedSessionStorage SessionStorage
@inject ILogger<Index> Logger
@rendermode InteractiveServer

<h3>Oceni invalidnost</h3>

@if (ocenjevalniModel?.trenutniSegment == null)
{
    <p>Nalaganje podatkov...</p>
}
else
{
    <div class="row">
        <!-- Leva stran: glavni del -->
        <div class="col-md-8">
            <!-- Breadcrumb -->
            <div class="trenutna-pot-box mb-3">
                @foreach (var korak in ocenjevalniModel.GetBreadcrumbPath(ocenjevalniModel?.trenutniSegment?.SegmentId))
                {
                    <span @onclick="@(() => NavigirajNaSegment(korak))"
                          style="cursor:pointer; text-decoration:underline;"
                          @key="korak.SegmentId">
                        @korak.Opis
                    </span>
                    @if (!ReferenceEquals(korak, ocenjevalniModel.GetBreadcrumbPath(ocenjevalniModel?.trenutniSegment?.SegmentId).Last()))
                    {
                        <span> &gt; </span>
                    }
                }
            </div>

            <!-- Atributi -->
            @if (ocenjevalniModel?.AtributiZaPrikaz?.Count > 0)
            {
                <OcenjevalniAtribut Segment="ocenjevalniModel?.trenutniSegment"
                                    @key="ocenjevalniModel?.trenutniSegment?.SegmentId"
                                    OnOcenaPotrjena="OnSegmentPotrjen" />
            }

            <!-- Podsegmenti -->
            @foreach (var podsegment in ocenjevalniModel?.SegmentiZaPrikaz)
            {
                <DelTelesa Segment="podsegment"
                           OnNavigate="NavigirajNaSegment"
                           @key="podsegment.SegmentId" />
            }
        </div>

        <!-- Desna stran: že ocenjeni segmenti -->
        <div class="col-md-4">
            @if (OcenjeniSegmenti.Any())
            {
                <div class="p-3 border rounded bg-light sticky-top" style="top: 1rem;">
                    <h5>Že ocenjeni segmenti</h5>
                    <ul class="list-group small">
                        @foreach (var seg in OcenjeniSegmenti)
                        {
                            var izbrani = seg.MozniDeficitNabor.Where(d => d.JeIzbran).ToList();
                            decimal? l = izbrani.FirstOrDefault(d => d.StranLDE == StranLDE.L)?.IzracunaniOdstotek;
                            decimal? d = izbrani.FirstOrDefault(d => d.StranLDE == StranLDE.D)?.IzracunaniOdstotek;
                            decimal? e = izbrani.FirstOrDefault(d => d.StranLDE == StranLDE.E)?.IzracunaniOdstotek;

                            var total = e ?? ((l ?? 0) + (d ?? 0));

                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                <span><b>@seg.Opis</b></span>
                                <span>@total.ToString("0.0") %</span>
                                <button class="btn btn-sm btn-outline-primary"
                                        @onclick="() => UrediSegment(seg)">
                                    Vpogled
                                </button>
                            </li>
                        }
                    </ul>

                    <!-- Povzetek vseh segmentov -->
                    <div class="mt-3 text-end">
                        <strong>Skupaj:</strong> @SkupnaInvalidnost.ToString("0.0") %
                    </div>
                </div>
            }
        </div>
    </div>
}


@code {

    private bool _initialized = false;
    private Segment? TrenutniSegment;

    private OcenjevalniModel ocenjevalniModel;

    private List<Segment> OcenjeniSegmenti = new();
    private decimal SkupnaInvalidnost;

    private List<Segment> BreadcrumbPath = new();

    private void IzberiSegment(Segment seg)
    {
        TrenutniSegment = seg;
        // posodobi breadcrumb pot
        BreadcrumbPath = BuildBreadcrumb(seg);
    }

    private List<Segment> BuildBreadcrumb(Segment seg)
    {
        var path = new List<Segment>();
        var current = seg;
        while (current != null)
        {
            path.Insert(0, current);
            // če imaš referenco na nadsegment, jo uporabi
            current = null; // TODO: poveži z modelom
        }
        return path;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            ocenjevalniModel = await ocenjevalniModel.ReadFromSessionStorage(SessionStorage);
            StateHasChanged(); // Optional; OnAfterRenderAsync usually doesn’t need it after firstRender
        }
    }

    private void OnSegmentPotrjen(Segment seg)
    {
        var idx = OcenjeniSegmenti.FindIndex(s => s.SegmentId == seg.SegmentId);
        if (idx >= 0)
            OcenjeniSegmenti[idx] = seg;
        else
            OcenjeniSegmenti.Add(seg);
    }




    private async Task NavigirajNaSegment(Segment segment)
    {
        await ocenjevalniModel.TrenutniSegmentSet(segment.SegmentId);
        var atr = ocenjevalniModel?.AtributiZaPrikaz;
        if (atr?.Count > 0)
        {
            var json = System.Text.Json.JsonSerializer.Serialize(atr);
            Logger.LogInformation("ocenjevalniModelLoader?.ocenjevalniModel?.AtributiZaPrikaz", json);
        }
        //StateHasChanged();
    }



    private void IzracunajSkupnoInvalidnost()
    {
        // 🔹 tukaj lahko uporabiš svojo medicinsko formulo (zaenkrat navaden seštevek)
        SkupnaInvalidnost = OcenjeniSegmenti
            .Sum(s => s.MozniDeficitNabor?.Max(d => d.IzracunaniOdstotek) ?? 0);
    }


    private void UrediSegment(Segment seg)
    {
        TrenutniSegment = seg;
    }



}
