@page "/oceni-invalidnost"
@using IzracunInvalidnostiBlazor.Extensions
@using IzracunInvalidnostiBlazor.Models
@using IzracunInvalidnostiBlazor.Services
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.Extensions.Logging
@inject NavigationManager NavigationManager
@inject DataDBLoader DataDBLoader
@inject ProtectedSessionStorage SessionStorage
@inject ILogger<Index> Logger
@rendermode InteractiveServer
@inject IConfiguration _config
@inject UserSessionStorageService UserSessionStorage
@inject LoaderService Loader


<h6>Izberi del telesa za ocenjevanje</h6>

@if (user?.OcenjevalniModel?.TrenutniDelTelesa != null)
{
    <div class="row">
        <!-- Leva stran: glavni del -->
        <div class="col-md-6 small-font">
            <!-- Breadcrumb -->
            <div class="trenutna-pot-box mb-3">
                @foreach (var korak in user?.OcenjevalniModel?.BreadcrumbPath)
                {
                    var isLast = korak == user?.OcenjevalniModel?.BreadcrumbPath.Last();

                    <span class="crumb @(isLast ? "active" : "")"
                          @onclick="@(() => NavigirajNaSegment(korak))"
                          @key="korak.DelTelesaId">
                        @korak.Opis
                    </span>

                    @if (!isLast)
                    {
                        <span class="separator">🞂</span>
                    }
                }
            </div>


            <!-- Atributi -->
            @if (user?.OcenjevalniModel?.AtributiZaPrikaz?.Count > 0)
            {
                <OcenjevalniAtribut DelTelesa="user?.OcenjevalniModel.TrenutniDelTelesa"
                                    @key="user?.OcenjevalniModel?.TrenutniDelTelesa?.DelTelesaId"
                                    OnOcenaPotrjena="OnSegmentPotrjen" />
            }

            <!-- Podsegmenti -->
            <div class="podsegment-list mb-4">
                @foreach (var seg in user?.OcenjevalniModel?.DeliTelesaZaPrikazSeznam)
                {
                    <div class="card podsegment-card mb-2"
                         @onclick="() => NavigirajNaSegment(seg)"
                         @key="seg.DelTelesaId">
                        <div class="card-body d-flex align-items-center">
                            <i class="bi bi-diagram-3 me-2 text-primary"></i>
                            <span>@seg.Opis</span>
                        </div>
                    </div>
                }
            </div>
        </div>

        <!-- Desna stran: že ocenjeni segmenti -->
        <div class="col-md-6 small-font">
            @if (user?.OcenaSeznam?.Any() == true)
            {
                <div class="p-3 border rounded bg-light sticky-top" style="top: 1rem;">
                    <h5>Že ocenjeni segmenti</h5>
                    <ul class="list-group small">
                        @foreach (var seg in user?.OcenaSeznam)
                        {
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                <span><b>@seg.DelTelesaTreePath</b></span>
                                <span>@seg.SkupniOdstotek %</span>
                                <button class="btn btn-sm btn-outline-primary"
                                        @onclick="() => VpogledVOcenjeniSegment(seg)">
                                    Vpogled
                                </button>
                            </li>
                        }
                    </ul>

                    <!-- Povzetek vseh segmentov -->
                    <div class="mt-3 text-end">
                        <strong>Skupaj:</strong> @user.SkupnaOcena %
                    </div>
                </div>
            }
        </div>
    </div>
}
@code {

   private PrijavljenUporabnik user;
    private bool _initialized = false;
    private DelTelesa? TrenutniDelTelesa;
    private List<DelTelesa> OcenjeniDeliTelesa = new();
    private decimal SkupnaInvalidnost;

    private List<DelTelesa> BreadcrumbPath = new();



    protected override async Task OnInitializedAsync()
    {
        await Loader.RunWithLoader("Berem podatke", async () =>
        {
            user = await UserSessionStorage.LoadUserAsync();
        });
    }

    private async void OnSegmentPotrjen(Models.DelTelesa seg)
    {
        user.DodajMedOcenjene(seg);
        await Loader.RunWithLoader("Shranjujem podatke", async () =>
        {
            await user.OcenjevalniModel.SetTrenutniDelTelesa(user?.OcenjevalniModel.GetRoot().DelTelesaId);
            await UserSessionStorage.SaveUserAsync(user);
        });
    }


    private async Task NavigirajNaSegment(Models.DelTelesa segment)
    {
        await user.OcenjevalniModel.SetTrenutniDelTelesa(segment.DelTelesaId);
        await user.OcenjevalniModel.SaveSessionToStorage(SessionStorage);
        var atr = user.OcenjevalniModel?.AtributiZaPrikaz;
        if (atr?.Count > 0)
        {
            var json = System.Text.Json.JsonSerializer.Serialize(atr);
            Logger.LogInformation("Atributi za prikaz: {json}", json);
        }
    }


    private async Task VpogledVOcenjeniSegment(Models.DelTelesa seg)
    {
        user.VpogledVOcenjeniSegment(seg.DelTelesaId);
        seg.FazaOcenjevanja = FazaOcenjevanjaEnum.Vpogled;
        await user.OcenjevalniModel.SaveSessionToStorage(SessionStorage);
    }


}
