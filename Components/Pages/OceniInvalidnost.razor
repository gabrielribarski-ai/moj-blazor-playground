@page "/oceni-invalidnost"
@using IzracunInvalidnostiBlazor.Services
@using Microsoft.Extensions.Logging
@inject SessionStorageService Storage
@inject NavigationManager NavigationManager
@inject SegmentService segmenti
@inject PogojAtributNaborLoader AtributLoader
@inject OcenjevalniModelLoader ocenjevalniModelLoader
@inject ILogger<Index> Logger
@rendermode InteractiveServer

<h3>Oceni invalidnost</h3>

@if (ocenjevalniModelLoader?.trenutniSegment == null)
{
    <p>Nalaganje podatkov...</p>
}
else
{
    
    var pot = ocenjevalniModelLoader.GetBreadcrumbPath(ocenjevalniModelLoader?.trenutniSegment?.SegmentId);
    //var otroci = segmenti.GetSegmentChildren(TrenutniSegment.SegmentId);
    <div class="trenutna-pot-box">
        @foreach (var korak in pot)
        {
            <span @onclick="@(() => NavigirajNaSegment(korak))"
                  style="cursor:pointer; text-decoration:underline;"
                  @key="korak.SegmentId">
                @korak.Opis
            </span>
            @if (!ReferenceEquals(korak, pot.Last()))
            {
                <span> &gt; </span>
            }
        }
    </div>
    
    
    @if (ocenjevalniModelLoader?.AtributiZaPrikaz?.Count>0)
    {
        <OcenjevalniAtribut Segment="ocenjevalniModelLoader?.trenutniSegment"
                            Atributi="ocenjevalniModelLoader.AtributiZaPrikaz"
                            @key="ocenjevalniModelLoader?.trenutniSegment?.SegmentId" />
    }
    
    @foreach (var podsegment in ocenjevalniModelLoader?.SegmentiZaPrikaz)
    {
        <DelTelesa Segment="podsegment"  OnNavigate="NavigirajNaSegment"  @key="podsegment.SegmentId" />
    }
    
}

@code {
    private bool _initialized = false;
    private Segment? TrenutniSegment;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Console.WriteLine("OnAfterRenderAsync");
        Logger.LogInformation("OnAfterRenderAsync klican, firstRender={First}", firstRender);
        if (firstRender && !_initialized)
        {
            var pogojIdStr = await Storage.GetItemAsync<string>("izbraniPogojId");
            if (!int.TryParse(pogojIdStr, out var pogojId))
            {
                NavigationManager.NavigateTo("/");
                return;
            }
            StateHasChanged();
        }
    }

    private async Task NavigirajNaSegment(Segment segment)
    {
        await ocenjevalniModelLoader.TrenutniSegmentSet(segment.SegmentId);
        var atr = ocenjevalniModelLoader?.AtributiZaPrikaz;
        if (atr?.Count > 0)
        {
            var json = System.Text.Json.JsonSerializer.Serialize(atr);
            Logger.LogInformation("ocenjevalniModelLoader?.ocenjevalniModel?.AtributiZaPrikaz", json);
        }
        StateHasChanged();
    }

    /*
    private void FiltrirajAtribute()
    {
        atributiZaTrenutniSegment.Clear();

        if (TrenutniSegment is null || vsiAtributi.Count == 0)
            return;

        // POZOR: Tip in oblika ID-ja — poravnaj ju (trim/upper/pretvorba)
        var segId = TrenutniSegment.SegmentId?.ToString()?.Trim();

        atributiZaTrenutniSegment = vsiAtributi
            .Where(a => string.Equals(
                a.SegmentId?.ToString()?.Trim(),
                segId,
                StringComparison.OrdinalIgnoreCase))
            .OrderBy(a => a.AtributId)
            .ToList();
    }
    */

}
