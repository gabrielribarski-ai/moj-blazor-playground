@page "/"
@namespace IzracunInvalidnostiBlazor
@using IzracunInvalidnostiBlazor.Extensions
@using IzracunInvalidnostiBlazor.Models
@using IzracunInvalidnostiBlazor.Services
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject OcenjevalniModelLoader ocenjevalniModelLoader
@inject ProtectedSessionStorage SessionStorage
@inject OcenjevalniModelSessionService ModelSession
@inject NavigationManager Nav
@rendermode InteractiveServer
@inject OcenjevalniModelSessionService ModelStorageService

<h3>Izberi pogoj</h3>

@if (ocenjevalniModel.PogojSeznam is null)
{
    <p>Nalaganje pogojev...</p>
}
else
{
    <select @onchange="OnPogojChanged">
        <option value="">-- Izberi --</option>
        @foreach (var pogoj in ocenjevalniModel.PogojSeznam)
        {
            <option value="@pogoj.PogojId">@pogoj.Sifra</option>
        }
    </select>
}

@code {
    private OcenjevalniModel ocenjevalniModel;

    protected override async Task OnInitializedAsync()
    {
        await ocenjevalniModelLoader.LoadPogojSeznamFromDB();
        ocenjevalniModel = ocenjevalniModelLoader.OcenjevalniModel;
        //await ocenjevalniModel.SaveSessionToStorage(SessionStorage);
        // ocenjevalniModelLoader del = await _model.ReadFromSessionStorage(SessionStorage);

        // ocenjevalniModel = ocenjevalniModelLoader.OcenjevalniModel;
        // StateHasChanged();
    }

    private async Task OnPogojChanged(ChangeEventArgs e)
    {
        string izbranPogojId = e.Value.ToString();
        ocenjevalniModel.IzbranPogojSet(izbranPogojId);
        ocenjevalniModelLoader.LoadSegmentSeznamFromDB();
        await ocenjevalniModel.SaveSessionToStorage(SessionStorage);
        ocenjevalniModel = await ocenjevalniModel.ReadFromSessionStorage(SessionStorage);
        Nav.NavigateTo("/oceni-invalidnost");

    }



}
