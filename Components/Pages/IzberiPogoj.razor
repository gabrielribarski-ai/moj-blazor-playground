@page "/izberi-pogoj"
@namespace IzracunInvalidnostiBlazor
@using IzracunInvalidnostiBlazor.Extensions
@using IzracunInvalidnostiBlazor.HelperClass
@using IzracunInvalidnostiBlazor.Models
@using IzracunInvalidnostiBlazor.Services
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.Extensions.Logging
@inject ILogger<Index> Logger
@inject OcenjevalniModelDBLoader ocenjevalniModelLoader
@inject ProtectedSessionStorage SessionStorage
@inject NavigationManager Nav
@inject UserSessionStorageService UserSessionStorage
@inject LoaderService Loader   

<h5>Izberi pogoj</h5>

@if (ocenjevalniModel?.PogojSeznam == null || !ocenjevalniModel.PogojSeznam.Any())
{
    <p>Nalaganje pogojev...</p>
}
else
{
    <div>
    <span>Št. dokumenta:&nbsp;</span>
    <span>@user.StDokumenta </span>
    </div>
    <select @onchange="OnPogojChanged">
        <option value="">-- Izberi --</option>
        @foreach (var pogoj in ocenjevalniModel.PogojSeznam)
        {
            <option value="@pogoj.PogojId">@pogoj.Sifra</option>
        }
    </select>
}

@code {
    private OcenjevalniModel ocenjevalniModel;
    private PrijavljenUporabnik? user;
    protected override async Task OnInitializedAsync()
    {
        ocenjevalniModel = new OcenjevalniModel();

        // naloži uporabnika iz session storage
        user = await UserSessionStorage.LoadUserAsync();


        ocenjevalniModel = new OcenjevalniModel();
        await ocenjevalniModelLoader.LoadPogojSeznamAsync(ocenjevalniModel)
               .WithLoader(Loader, "Nalaganje pogojev...");

    }

    private async Task OnPogojChanged(ChangeEventArgs e)
    {
        string izbranPogojId = e.Value?.ToString();

        // vse skupaj ovijemo v loader
        await Loader.RunWithLoader("Berem podatke za izbran pogoj...", async () =>
        {
            await ocenjevalniModelLoader.LoadSegmentSeznamAsync(ocenjevalniModel);
            await ocenjevalniModel.IzbranPogojSet(izbranPogojId);
            await ocenjevalniModelLoader.LoadStopnjeAsync(ocenjevalniModel, izbranPogojId);
            await ocenjevalniModel.SaveSessionToStorage(SessionStorage);
        });

        Nav.NavigateTo("/oceni-invalidnost");
    }
}
