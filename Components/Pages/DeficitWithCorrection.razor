@* filename: DeficitWithCorrection.razor *@
@using IzracunInvalidnostiBlazor.Models
@using IzracunInvalidnostiBlazor.Services
@inject LoaderService Loader
@inject UserSessionStorageService UserSessionStorage
@using CustomTypeExtensions
@using System.Globalization

<div class="deficit-block @CssClassForStran(Stran)">
    <h6 class="fw-bold">@NaslovZaStran(Stran)</h6>

    <div class="d-flex align-items-center gap-2">
        <DeficitSelector @key="@($"{Segment.SegmentId}-{Stran}")"
                         Stran="Stran"
                         MozniZaStran="Segment.MozniDeficitNabor.Where(d => d.StranLDE == Stran)"
                         OnSelectionChanged="OnSelectionChanged" />

        @if (IzbranDeficit != null)
        {
            <button class="btn btn-link btn-sm p-0 ms-1 text-secondary"
                    title="Popravi"
                    @onclick="ToggleKorekcija">
                ✎
            </button>
        }
    </div>

    @if (PrikaziKorekcijo && IzbranDeficit != null)
    {
        <div class="mt-2 ms-4 p-2 border rounded bg-light">
            <input type="text"
                   class="form-control form-control-sm mb-2"
                   placeholder="Ročni odstotek"
                   @bind-value="KorekcijaText"
                   @bind-value:event="oninput"
                   @onblur="NormalizeKorekcija" />

            <textarea class="form-control form-control-sm"
                      placeholder="Komentar"
                      @bind-value="Komentar"
                      @bind-value:event="oninput">
                </textarea>
        </div>
    }
</div>

@code {
    [Parameter] public Segment Segment { get; set; } = default!;
    [Parameter] public StranLDE Stran { get; set; }
    [Parameter] public EventCallback<(StranLDE stran, decimal? val)> OnSelectionChanged { get; set; }

    private PrijavljenUporabnik user;
    private bool PrikaziKorekcijo;
    private string? korekcijaText;

    private void ToggleKorekcija()
        => PrikaziKorekcijo = !PrikaziKorekcijo;

    private string? KorekcijaText
    {
        get => korekcijaText;
        set
        {
            korekcijaText = value;

            if (string.IsNullOrWhiteSpace(value))
            {
                Segment.SetKorekcija(Stran, null);
                return;
            }

            if (TryParseDecimal(value, out var result))
            {
                Segment.SetKorekcija(Stran, result);
            }
        }
    }

    private void NormalizeKorekcija(FocusEventArgs _)
    {
        if (string.IsNullOrWhiteSpace(korekcijaText))
        {
            Segment.SetKorekcija(Stran, null);
            korekcijaText = string.Empty;
            return;
        }

        if (TryParseDecimal(korekcijaText, out var result))
        {
            Segment.SetKorekcija(Stran, result);
            korekcijaText = result.ToString(CultureInfo.CurrentCulture);
        }
        else
        {
            // povrni zadnjo veljavno vrednost iz modela
            korekcijaText = Segment.GetKorekcija(Stran)?.ToString(CultureInfo.CurrentCulture) ?? string.Empty;
        }

        StateHasChanged();
    }

    private static bool TryParseDecimal(string? input, out decimal result)
    {
        input = input?.Replace(',', '.');
        return decimal.TryParse(input, NumberStyles.Any, CultureInfo.InvariantCulture, out result);
    }

    private string? Komentar
    {
        get => Segment.GetKomentar(Stran);
        set => Segment.SetKomentar(Stran, value);
    }

    private MozniDeficit? IzbranDeficit
        => Segment.IzbranDeficit(Stran);

    protected override void OnParametersSet()
    {
        korekcijaText = Segment.GetKorekcija(Stran)?.ToString(CultureInfo.CurrentCulture) ?? string.Empty;
    }

    protected override async Task OnInitializedAsync()
    {
        await Loader.RunWithLoader("Berem podatke", async () =>
        {
            user = await UserSessionStorage.LoadUserAsync();
        });
    }

    private string CssClassForStran(StranLDE stran) => stran switch
    {
        StranLDE.L => "stran-l",
        StranLDE.D => "stran-d",
        StranLDE.E => "stran-e",
        _ => ""
    };

    private string NaslovZaStran(StranLDE stran) => stran switch
    {
        StranLDE.L => "Leva stran (L)",
        StranLDE.D => "Desna stran (D)",
        StranLDE.E => "Enostransko (E)",
        _ => ""
    };
}
