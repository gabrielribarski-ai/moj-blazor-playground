@using IzracunInvalidnostiBlazor.Models

<table class="table table-bordered">
    <thead>
        <tr>
            <th>Atribut</th>
            @if (Segment.SimetrijaTelesa == SimetrijaTelesaEnum.E)
            {
                <th>E</th>
            }
            else
            {
                <th>L</th>
                <th>S</th>
                <th>D</th>
            }
        </tr>
    </thead>
    <tbody>
        @foreach (var atribut in Segment.Atributi)
        {
            <tr>
                <td>@atribut.Opis</td>
                @if (Segment.SimetrijaTelesa == SimetrijaTelesaEnum.E)
                {
                    <td>
                        <InputNumber @bind-Value="atribut.Ocena.VrednostE"
                                     @bind-Value:after="() => OnValueChanged()"
                                     class="form-control input-box-measurement" />
                    </td>
                }
                else
                {
                    <td>
                        <InputNumber @bind-Value="atribut.Ocena.VrednostL"
                                     @bind-Value:after="() => OnValueChanged()"
                                     class="form-control input-box-measurement" />
                    </td>
                    <td>@atribut.StandardnaVrednost</td>
                    <td>
                        <InputNumber @bind-Value="atribut.Ocena.VrednostD"
                                     @bind-Value:after="() => OnValueChanged()"
                                     class="form-control input-box-measurement" />
                    </td>
                }
            </tr>
        }
    </tbody>
</table>

@code {



    [Parameter] public Segment Segment { get; set; }
    [Parameter] public EventCallback<FazaOcenjevanjaEnum> FazaChanged { get; set; }


    private void OnValueChanged()
    {

        bool b = false;
        // preveri, ali ima vsak atribut vsaj eno vneseno vrednost
        if (Segment.SimetrijaTelesa == SimetrijaTelesaEnum.E)
        {
            b = Segment.Atributi.All(a => a.Ocena.VrednostE.HasValue);
        }
        else
        {
            b = Segment.Atributi.All(a => a.Ocena.VrednostL.HasValue && a.Ocena.VrednostD.HasValue);
        }
        if (b)
        {
            Segment.FazaOcenjevanja = FazaOcenjevanjaEnum.OceneSoVnesene;
            FazaChanged.InvokeAsync(Segment.FazaOcenjevanja);
        }

        //StateHasChanged();
    }


}
