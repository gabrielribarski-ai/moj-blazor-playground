@using IzracunInvalidnostiBlazor.Models

<table class="table table-bordered atributi-tabela">
    <thead>
        <tr>
            <th>Atribut</th>
            @if (Segment.SimetrijaTelesa == SimetrijaTelesaEnum.E)
            {
                <th>E</th>
            }
            else
            {
                <th>L</th>
                <th>S</th>
                <th>D</th>
            }
        </tr>
    </thead>
    <tbody>
        @foreach (var atribut in Segment.Atributi)
        {
            <tr>
                <td>@atribut.Opis</td>

                @if (Segment.SimetrijaTelesa == SimetrijaTelesaEnum.E)
                {
                    <td>
                        <InputNumber Value="atribut.Ocena.VrednostE"
                                     ValueExpression="() => atribut.Ocena.VrednostE"
                                     @oninput="EventCallback.Factory.CreateBinder<decimal?>(this, v => SetE(atribut, v), atribut.Ocena.VrednostE)"
                                     class="form-control input-box-measurement" />

                    </td>
                }
                else
                {
                    <td>
                        <InputNumber Value="atribut.Ocena.VrednostL"
                                     ValueExpression="() => atribut.Ocena.VrednostL"
                                     @oninput="EventCallback.Factory.CreateBinder<decimal?>(this, v => SetL(atribut, v), atribut.Ocena.VrednostE)"
                                     class="form-control input-box-measurement" />

                    </td>

                    <td>@(atribut.StandardnaVrednost?.ToString("0.##") ?? "—")</td>

                    <td>
                        <InputNumber Value="atribut.Ocena.VrednostD"
                                     ValueExpression="() => atribut.Ocena.VrednostD"
                                     @oninput="EventCallback.Factory.CreateBinder<decimal?>(this, v => SetD(atribut, v), atribut.Ocena.VrednostE)"
                                     class="form-control input-box-measurement" />

                    </td>
                }
            </tr>
        }
    </tbody>
</table>

@code {
    [Parameter] public Segment Segment { get; set; }
    [Parameter] public EventCallback<FazaOcenjevanjaEnum> FazaChanged { get; set; }



    private void SetE(Atribut atribut, decimal? v)
    {
        atribut.Ocena.VrednostE = v;
        _ = OnValuesMaybeComplete();
    }

    private void SetL(Atribut atribut, decimal? v)
    {
        atribut.Ocena.VrednostL = v;
        _ = OnValuesMaybeComplete();
    }

    private void SetD(Atribut atribut, decimal? v)
    {
        atribut.Ocena.VrednostD = v;
        _ = OnValuesMaybeComplete();
    }

    private async Task OnValuesMaybeComplete()
    {
        bool allSet =
            Segment.SimetrijaTelesa == SimetrijaTelesaEnum.E
            ? Segment.Atributi.All(a => a.Ocena?.VrednostE.HasValue == true)
            : Segment.Atributi.All(a => a.Ocena?.VrednostL.HasValue == true && a.Ocena?.VrednostD.HasValue == true);

        if (allSet)
        {
            Segment.FazaOcenjevanja = FazaOcenjevanjaEnum.OceneSoVnesene;
            await FazaChanged.InvokeAsync(Segment.FazaOcenjevanja);
        }
    }

}
