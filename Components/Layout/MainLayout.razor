@inherits LayoutComponentBase
@using IzracunInvalidnostiBlazor.Components.Pages
@using IzracunInvalidnostiBlazor.Models
@using IzracunInvalidnostiBlazor.Services
@inject UserSessionStorageService UserSessionStorage
@inject NavigationManager Nav
@inject LoaderService Loader
@inject DataDBLoader DataDBLoader

<div class="app-shell @(Loader.IsVisible ? "has-loader" : null)">
    <div class="header-wrap">
        <!-- Glavni header z logotipom in uporabnikom -->
        <div class="app-header">
            <img src="images/generali-logo-big.svg" alt="Generali" class="logo" />
            <div class="user-info">
                @if (user != null)
                {
                    <span>Prijavljen: &nbsp;</span>
                    <span>@user.Ime @user.Priimek </span>
                    <span>@user.CasPrijave.ToShortTimeString()</span>
                    <button class="btn-logout" @onclick="Logout">Odjava</button>
                }
            </div>
        </div>

        <!-- Loader -->
        <div class="loading-bar @(Loader.IsVisible ? "show" : "hide")">
            <span>@Loader.Message</span>
        </div>

        <!-- TopContextBar -->
@if (user != null && user.OcenjevalniModel?.PogojSeznam != null)
{
    <TopContextBar PogojSeznam="user.OcenjevalniModel.PogojSeznam"
                   IzbranPogojSifra="@user.IzbranPogoj?.Sifra"
                   StDokumenta="@user.StDokumenta"
                   PacientIme="@user.ImePacienta"
                   PacientPriimek="@user.PriimekPacienta"
                   DatumOcenjevanja="@DateTime.Today"
                   OnPogojPotrjen="OnPogojChanged" />
}
    </div>

    <article class="content">
        @Body
    </article>
</div>


 @code {
    private PrijavljenUporabnik? user;

    protected override void OnInitialized()
    {
        Loader.OnChange += StateHasChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            user = await Loader.RunWithLoader("", async () =>
            {
                return await UserSessionStorage.LoadUserAsync();
            });

            // Ensure PogojSeznam is loaded for the dropdown
            if (user?.OcenjevalniModel?.PogojSeznam == null || !user.OcenjevalniModel.PogojSeznam.Any())
            {
                user.OcenjevalniModel ??= new OcenjevalniModel();
                var loader = new DataDBLoader(/* _config if needed */);
                user.OcenjevalniModel.PogojSeznam = await DataDBLoader.LoadPogojSeznamAsync();
                await UserSessionStorage.SaveUserAsync(user);
                StateHasChanged();
            }
        }
    }

    public void Dispose()
    {
        Loader.OnChange -= StateHasChanged;
    }

    private async Task Logout()
    {
        await Loader.RunWithLoader("Odjavljam uporabnika...", async () =>
        {
            await UserSessionStorage.ClearSessionFromStorage();
            Nav.NavigateTo("/", forceLoad: true);
        });
    }

    private async Task OnPogojChanged(string izbranPogojId)
    {
        await Loader.RunWithLoader("", async () =>
        {
            user.OcenjevalniModel.DelTelesaSeznam = await DataDBLoader.LoadSegmentSeznamAsync();
            await DataDBLoader.PreberiInPoveziAtributeDBAsync(user.OcenjevalniModel);
            await user.SetIzbranPogoj(izbranPogojId);
            //await DataDBLoader.PreberiStopnjDBAsync(user.OcenjevalniModel, izbranPogojId);
            await DataDBLoader.LoadStopnjeAsync(user.OcenjevalniModel, izbranPogojId);
            await UserSessionStorage.SaveUserAsync(user);
        });

        // Now that user.IzbranPogoj is set, the TopContextBar will render as text
        Nav.NavigateTo("/oceni-invalidnost");
    }
}

